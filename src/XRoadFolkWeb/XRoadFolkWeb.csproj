<Project Sdk="Microsoft.NET.Sdk.Web">
  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <InvariantGlobalization>false</InvariantGlobalization>
    <AnalysisLevel>latest</AnalysisLevel>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>

    <!-- Version info -->
    <Version>1.0.0</Version>
    <AssemblyInformationalVersion>1.0.0</AssemblyInformationalVersion>

    <!-- Performance: Precompile Razor views/pages and ReadyToRun in Release -->
    <RazorCompileOnBuild>true</RazorCompileOnBuild>
    <RazorCompileOnPublish>true</RazorCompileOnPublish>
    <PublishReadyToRun Condition=" '$(Configuration)' == 'Release' ">true</PublishReadyToRun>

    <!-- Trimming is NOT supported for Razor Pages; disable trim publish and analyzer to avoid IL2026 -->
    <PublishTrimmed>false</PublishTrimmed>
    <EnableTrimAnalyzer>false</EnableTrimAnalyzer>
    <TrimWarnAsError>false</TrimWarnAsError>

    <!-- Ensure RID-specific assets are restored when needed by VS tooling -->
    <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>

    <!-- Enforce code style diagnostics in build for CI parity -->
    <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>

    <!-- Icon generation configuration (opt-in) -->
    <GenerateRasterIcons>false</GenerateRasterIcons>
    <IconSourceSvg>$(ProjectDir)wwwroot/favicon.svg</IconSourceSvg>
    <IconOutputDir>$(ProjectDir)wwwroot/icons</IconOutputDir>
    <IconSizes>16;32;48;64;128;180;192;256;384;512</IconSizes>
  </PropertyGroup>

  <ItemGroup>
    <ProjectReference Include="..\XRoadFolkRaw.Lib\XRoadFolkRaw.Lib.csproj" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\XRoadFolkRaw.Lib\Resources\*.pfx">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      <TargetPath>%(Filename)%(Extension)</TargetPath>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Remove="..\XRoadFolkRaw.Lib\Resources\hnpv-cloudtar01.pfx" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="OpenTelemetry.Exporter.OpenTelemetryProtocol" Version="1.12.0" />
    <PackageReference Include="OpenTelemetry.Exporter.Prometheus.AspNetCore" Version="1.12.0-beta.1" />
    <PackageReference Include="OpenTelemetry.Extensions.Hosting" Version="1.12.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.AspNetCore" Version="1.12.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Http" Version="1.12.0" />
    <PackageReference Include="OpenTelemetry.Instrumentation.Runtime" Version="1.12.0" />
    <PackageReference Include="OpenTelemetry.Exporter.Console" Version="1.12.0" />
    <PackageReference Include="Microsoft.Extensions.Caching.StackExchangeRedis" Version="9.0.8" />
    <PackageReference Include="Microsoft.Extensions.Caching.SqlServer" Version="9.0.8" />
  </ItemGroup>

  <!-- Generate raster icons from single SVG source if tools are available and opt-in enabled -->
  <Target Name="GenerateRasterIcons" BeforeTargets="Build" Condition=" '$(GenerateRasterIcons)' == 'true' AND Exists('$(IconSourceSvg)') ">
    <MakeDir Directories="$(IconOutputDir)" />

    <!-- Define sizes as items -->
    <ItemGroup>
      <_IconSize Include="$(IconSizes)" />
    </ItemGroup>

    <!-- Try ImageMagick 'magick' first (Windows cmd syntax) -->
    <Exec ContinueOnError="true"
          Command='for %%s in (@(_IconSize, &quot; &quot;)) do ( magick convert -background none &quot;$(IconSourceSvg)&quot; -resize %%s^x%%s &quot;$(IconOutputDir)/icon-%%s.png&quot; )' 
          WorkingDirectory="$(ProjectDir)" 
          StandardOutputImportance="Low" 
          StandardErrorImportance="Low" />

    <!-- Try legacy ImageMagick 'convert' -->
    <Exec ContinueOnError="true"
          Command='for %%s in (@(_IconSize, &quot; &quot;)) do ( convert -background none &quot;$(IconSourceSvg)&quot; -resize %%s^x%%s &quot;$(IconOutputDir)/icon-%%s.png&quot; )' 
          WorkingDirectory="$(ProjectDir)" 
          StandardOutputImportance="Low" 
          StandardErrorImportance="Low" />

    <!-- Try rsvg-convert (librsvg) -->
    <Exec ContinueOnError="true"
          Command='for %%s in (@(_IconSize, &quot; &quot;)) do ( rsvg-convert -w %%s -h %%s -a -f png -o &quot;$(IconOutputDir)/icon-%%s.png&quot; &quot;$(IconSourceSvg)&quot; )' 
          WorkingDirectory="$(ProjectDir)" 
          StandardOutputImportance="Low" 
          StandardErrorImportance="Low" />

    <!-- Try Inkscape -->
    <Exec ContinueOnError="true"
          Command='for %%s in (@(_IconSize, &quot; &quot;)) do ( inkscape &quot;$(IconSourceSvg)&quot; --export-type=png --export-filename=&quot;$(IconOutputDir)/icon-%%s.png&quot; -w %%s -h %%s )' 
          WorkingDirectory="$(ProjectDir)" 
          StandardOutputImportance="Low" 
          StandardErrorImportance="Low" />

    <!-- Include generated icons as content if they exist -->
    <ItemGroup>
      <Content Include="$(IconOutputDir)/**.png" Condition="Exists('$(IconOutputDir)')">
        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </Content>
    </ItemGroup>
  </Target>
</Project>

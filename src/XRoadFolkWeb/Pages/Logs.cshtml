@page
@model XRoadFolkWeb.Pages.LogsModel
@{
    ViewData["Title"] = "Logs";
}

<div class="card shadow-sm">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center mb-2 flex-wrap gap-2">
      <h5 class="card-title mb-0">Logs</h5>
      <div class="d-flex flex-wrap gap-2 align-items-center">
        <div class="input-group input-group-sm" style="min-width:280px;">
          <span class="input-group-text" id="lg-search-label">Search</span>
          <input type="search" id="lg-search" class="form-control" placeholder="Filter log lines" aria-describedby="lg-search-label lg-search-count">
        </div>
        <small id="lg-search-count" class="text-muted">&nbsp;</small>
        <button type="button" id="lg-back" class="btn btn-sm btn-outline-secondary">Back</button>
        <button type="button" id="lg-pause" class="btn btn-sm btn-outline-secondary" aria-pressed="false">Pause</button>
        <form method="post" asp-page-handler="Clear" class="d-inline">
          <button type="submit" class="btn btn-sm btn-outline-danger">Clear</button>
        </form>
        <a class="btn btn-sm btn-outline-secondary" href="?">Reload</a>
      </div>
    </div>
    <pre id="lg-pre" class="small bg-body-tertiary p-3 border rounded" style="white-space: pre-wrap; max-height: 70vh; overflow:auto;">@Model.LogText</pre>
  </div>
</div>

<style>
/* Bright, accessible highlight for matches */
#lg-pre mark {
  background: #ffeb3b; /* bright yellow */
  color: #111;         /* dark text for contrast */
  padding: 0 .15em;
  border-radius: .2rem;
}
[data-bs-theme="brand-dark"] #lg-pre mark {
  background: #ffd54f; /* warm bright for dark bg */
  color: #111;
}
</style>

@section Scripts {
<script>
(function(){
  var pre = document.getElementById('lg-pre');
  var paused = false;
  var pauseBtn = document.getElementById('lg-pause');
  var backBtn = document.getElementById('lg-back');
  var search = document.getElementById('lg-search');
  var countEl = document.getElementById('lg-search-count');

  // in-memory buffer of all lines, used for filtering
  var buffer = [];
  function hydrateBufferFromPre(){
    buffer = (pre && pre.textContent ? pre.textContent.split(/\r?\n/) : []).filter(function(l){ return l !== undefined && l !== null; });
  }

  function escapeHtml(s){
    return String(s).replace(/[&<>"']/g, function(c){
      switch(c){ case '&': return '&amp;'; case '<': return '&lt;'; case '>': return '&gt;'; case '"': return '&quot;'; case "'": return '&#39;'; default: return c; }
    });
  }
  function escapeRegExp(s){
    return String(s).replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }
  function highlight(line, q){
    if (!q) return escapeHtml(line);
    try{
      var re = new RegExp(escapeRegExp(q), 'gi');
      return escapeHtml(line).replace(re, function(m){ return '<mark>'+escapeHtml(m)+'</mark>'; });
    }catch{ return escapeHtml(line); }
  }

  function render(){
    if (!pre) return;
    var q = (search && search.value || '');
    var lines = !q ? buffer : buffer.filter(function(l){ return l.toLowerCase().indexOf(q.toLowerCase()) >= 0; });
    if (!q){
      pre.textContent = lines.join('\n');
    } else {
      pre.innerHTML = lines.map(function(l){ return highlight(l, q); }).join('\n');
    }
    if (countEl){ countEl.textContent = q ? (lines.length + ' matches') : '\u00A0'; }
    pre.scrollTop = pre.scrollHeight;
  }
  function setPaused(v){ paused=v; if(pauseBtn){ pauseBtn.setAttribute('aria-pressed', String(v)); pauseBtn.textContent = v ? 'Resume' : 'Pause'; } }

  if (pauseBtn) pauseBtn.addEventListener('click', function(){ setPaused(!paused); });
  if (backBtn) backBtn.addEventListener('click', function(){ if (document.referrer && document.referrer !== window.location.href) { history.back(); } else { window.location.href = '/'; } });
  if (search) search.addEventListener('input', render);

  function appendLine(line){
    if (typeof line !== 'string') return;
    buffer.push(line);
    if (!paused){ render(); }
  }

  hydrateBufferFromPre();

  try{
    var es = new EventSource(window.location.pathname + '?handler=Stream');
    es.onmessage = function(ev){ appendLine(ev.data); };
    es.onerror = function(){ /* ignore; browser will reconnect */ };
  }catch{}
})();
</script>
}

@page
@model XRoadFolkWeb.Pages.IndexModel
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer L
@{
    ViewData["Title"] = L["Title"];
    var nonce = ViewContext?.HttpContext?.Items?["CSP_NONCE"] as string;
}

<h1 class="mb-4">@L["Title"]</h1>

<div class="row g-4 align-items-start">
    <!-- People Search (kept as-is) -->
    <div class="col-12 col-lg-5 col-xxl-4">
        <div class="card shadow-sm h-100">
            <div class="card-body">
                <h5 class="card-title">@L["SearchCriteria"]</h5>
                <p class="text-muted mb-3">@L["ProvideCriteria"]</p>

                <form method="post" class="row gy-3" id="gpip-search-form" autocomplete="off">
                    <div asp-validation-summary="ModelOnly" class="text-danger small"></div>

                    <div class="col-12">
                        <label asp-for="Ssn" class="form-label"></label>
                        <input asp-for="Ssn" class="form-control"
                               autocomplete="off" autocapitalize="off" spellcheck="false"
                               data-val-ssnornamedob="@XRoadFolkWeb.Resources.ValidationMessages.ProvideSsnOrNameDob"
                               data-val-ssnornamedob-ssn="Ssn"
                               data-val-ssnornamedob-first="FirstName"
                               data-val-ssnornamedob-last="LastName"
                               data-val-ssnornamedob-dob="DateOfBirth" />
                        <span asp-validation-for="Ssn" class="text-danger small"></span>
                    </div>

                    <div class="col-12">
                        <div class="text-center text-muted-sep">@L["OrSeparator"]</div>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="FirstName" class="form-label"></label>
                        <input asp-for="FirstName" class="form-control" autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <span asp-validation-for="FirstName" class="text-danger small"></span>
                    </div>
                    <div class="col-md-6">
                        <label asp-for="LastName" class="form-label"></label>
                        <input asp-for="LastName" class="form-control" autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <span asp-validation-for="LastName" class="text-danger small"></span>
                    </div>
                    <div class="col-12">
                        <label asp-for="DateOfBirth" class="form-label"></label>
                        <input asp-for="DateOfBirth" class="form-control" placeholder="@L["DateFormatPlaceholder"]" autocomplete="off" autocapitalize="off" spellcheck="false" />
                        <span asp-validation-for="DateOfBirth" class="text-danger small"></span>
                    </div>

                    <div class="col-12 d-grid d-sm-flex gap-2 mt-2">
                        <button type="submit" class="btn btn-primary">@L["Search"]</button>
                        <button type="submit" asp-page-handler="Clear" class="btn btn-outline-secondary">@L["Clear"]</button>
                    </div>
                </form>

                @if (Model.Errors?.Count > 0)
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        <strong>@L["InputErrors"]</strong>
                        <ul class="mb-0">
                            @foreach (var e in Model.Errors)
                            {
                                <li>@e</li>
                            }
                        </ul>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- GetPeoplePublicInfo viewer -->
    <div class="col-12 col-lg-7 col-xxl-8 min-w-0">
        @if ((Model?.Results?.Count ?? 0) > 0)
        {
            <partial name="_GetPeoplePublicInfoViewer"
                     view-data='new ViewDataDictionary(ViewData) {
                         ["RawXml"] = Model?.PeoplePublicInfoResponseXml ?? string.Empty,
                         ["PrettyXml"] = Model?.PeoplePublicInfoResponseXmlPretty ?? string.Empty
                     }' />
        }
        else if (Model?.PeoplePublicInfoResponseXml != null)
        {
            <div class="alert alert-info" role="status">@L["NoPeopleFound"]</div>
        }

        <!-- GetPerson response (AJAX-filled; kept separate and below the viewer) -->
        <div id="person-details-section" class="card shadow-sm mb-4 person-details d-none" role="region" aria-labelledby="pd-title">
          <div class="card-body">
            <div class="pd-toolbar d-flex flex-wrap gap-2 justify-content-between align-items-center mb-2 border-bottom pb-2">
              <h5 id="pd-title" class="card-title mb-0">
                @L["PersonDetails"]
                @if (!string.IsNullOrWhiteSpace(Model?.SelectedNameSuffix))
                {
                    <small class="text-muted ms-2">@Model.SelectedNameSuffix</small>
                }
              </h5>

              <div class="d-flex flex-wrap gap-2">
                <button type="button" id="pd-expand-all" class="btn btn-sm btn-outline-secondary"><i class="bi bi-chevron-double-down me-1" aria-hidden="true"></i>@L["Expand"]</button>
                <button type="button" id="pd-collapse-all" class="btn btn-sm btn-outline-secondary"><i class="bi bi-chevron-double-up me-1" aria-hidden="true"></i>@L["Collapse"]</button>
                <button type="button" id="pd-fullscreen" class="btn btn-sm btn-outline-secondary" title="@L["ToggleFullscreen"]">@L["Fullscreen"]</button>
              </div>
            </div>

            <div id="person-details-loading" class="d-none" aria-live="polite">
              @await Html.PartialAsync("_Spinner", null, new ViewDataDictionary(ViewData) { ["Text"] = L["Loading"].Value, ["Size"] = "sm", ["Color"] = "text-secondary" })
            </div>
            <div id="person-details-error" class="alert alert-danger d-none" role="alert" aria-live="assertive"></div>

            <div id="person-details-body"><!-- accordion injected here --></div>
          </div>
        </div>

        <style nonce="@nonce">
        /* Scoped GetPerson styling (matches viewer look) */
        .person-details .pd-toolbar { position: sticky; top: -1px; z-index: 2; background: var(--bs-body-bg); }
        .person-details .accordion-button { padding: .5rem .75rem; font-weight: 600; }
        .person-details .accordion-item + .accordion-item { border-top: 1px solid var(--bs-border-color); }
        .person-details .accordion-body { padding: 0; }
        #person-details-body { max-height: var(--pd-h, 50vh); overflow: auto; }
        .person-details .table { margin-bottom: 0; }
        .person-details .table th { width: 35%; background: var(--bs-tertiary-bg, var(--bs-secondary-bg-subtle)); color: var(--bs-secondary-color); }
        .person-details .table th, .person-details .table td { vertical-align: top; word-break: break-word; }
        .person-details .table tbody tr:hover th, .person-details .table tbody tr:hover td { background: var(--bs-secondary-bg-subtle); }
        @@keyframes pdFlash { 0% { background: rgba(255,243,205,.9); } 100% { background: transparent; } }
        .person-details .pd-flash { animation: pdFlash 1.2s ease-out 1; }
        .person-details.pd-fullscreen { position: fixed; inset: 0; z-index: 1050; margin: 0; border-radius: 0; background: var(--bs-body-bg); }
        .person-details.pd-fullscreen .card-body { height: 100dvh; display: flex; flex-direction: column; }
        .person-details.pd-fullscreen #person-details-body { max-height: calc(100dvh - 7.5rem); flex: 1 1 auto; }
        </style>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="~/js/validation-ssn.js"></script>
    <script src="~/js/validation-name.js"></script>
    <script src="~/js/validation-dob.js"></script>
    <script src="~/js/validation-ssn-or-name-dob.js"></script>
    <script src="~/js/validation-letters-only.js"></script>

    <script nonce="@nonce">
  // Reusable toggle function
  function togglePDFullscreen(){
    var sec = document.getElementById('person-details-section');
    if (!sec) return;
    // Ensure section is visible before toggling fullscreen
    if (sec.classList.contains('d-none')) sec.classList.remove('d-none');
    try {
      if (!document.fullscreenElement) {
        if (sec.requestFullscreen) {
          sec.requestFullscreen({ navigationUI: 'hide' }).catch(function(){ sec.classList.toggle('pd-fullscreen'); });
        } else {
          sec.classList.toggle('pd-fullscreen');
        }
      } else {
        if (document.exitFullscreen) {
          document.exitFullscreen().catch(function(){ sec.classList.toggle('pd-fullscreen'); });
        } else {
          sec.classList.toggle('pd-fullscreen');
        }
      }
    } catch (e) { sec.classList.toggle('pd-fullscreen'); }
  }

  // Delegated handler (fallback)
  document.addEventListener('click', function (e) {
    var fsBtn = e.target && e.target.closest && e.target.closest('#pd-fullscreen');
    if (fsBtn) {
      e.preventDefault();
      e.stopImmediatePropagation();
      togglePDFullscreen();
    }
  });

  // Direct capturing listener to bypass interfering handlers
  document.addEventListener('DOMContentLoaded', function(){
    var btn = document.getElementById('pd-fullscreen');
    if (btn) {
      btn.addEventListener('click', function(ev){ ev.preventDefault(); ev.stopImmediatePropagation(); togglePDFullscreen(); }, { capture: true });
    }
  });

  // Keep CSS class in sync with DOM fullscreen changes
  document.addEventListener('fullscreenchange', function(){
    var sec = document.getElementById('person-details-section');
    if (!sec) return;
    var isFs = document.fullscreenElement === sec;
    sec.classList.toggle('pd-fullscreen', isFs || sec.classList.contains('pd-fullscreen'));
  });
    </script>

    <script nonce="@nonce">
  // Optional: flash when new content is injected
  (function(){
    var body = document.getElementById('person-details-body');
    if (!body) return;
    var mo = new MutationObserver(function() {
      var host = document.getElementById('person-details-section');
      if (host) { host.classList.add('pd-flash'); setTimeout(function(){ host.classList.remove('pd-flash'); }, 900); }
    });
    mo.observe(body, { childList: true });
  })();
    </script>

    <script nonce="@nonce">
// Enhance the existing appended helper (mask removed)
(function(){
  function getToolbarEls() { return { copyJson: document.getElementById('pd-copy-json'), dlJson: document.getElementById('pd-download-json') }; }
  function pairsToObject(pairs) { var root = {}; (pairs || []).forEach(function(p){ var path = String(p.key || '').split('.'); var curr = root; for (var i=0;i<path.length;i++){ var seg=path[i]; var m=seg.match(/^(.+)[(\[](?:(\d+))[)\]]$/); if(!m){ m=seg.match(/^(.+)\[(\d+)\]$/); } if(m){ var base=m[1], idx=parseInt(m[2],10); curr[base]=curr[base]||[]; curr=curr[base]; curr[idx]=curr[idx]||{}; curr=curr[idx]; } else { if(i===path.length-1){ curr[seg]=p.value; } else { curr[seg]=curr[seg]||{}; curr=curr[seg]; } } } }); return root; }
  function stateKey(pid){ return 'pd-acc-open:' + pid; }
  function saveAccState(pid){ try{ if(!pid) return; var open=[]; document.querySelectorAll('#person-details-section .accordion-item').forEach(function(it){ var name=it.getAttribute('data-group')||''; var col=it.querySelector('.accordion-collapse'); if(name && col && col.classList.contains('show')) open.push(name); }); localStorage.setItem(stateKey(pid), JSON.stringify(open)); }catch(e){} }
  function restoreAccState(pid){ try{ if(!pid) return; var raw=localStorage.getItem(stateKey(pid)); if(!raw) return; var open=JSON.parse(raw||'[]'); document.querySelectorAll('#person-details-section .accordion-item').forEach(function(it){ var name=it.getAttribute('data-group')||''; var col=it.querySelector('.accordion-collapse'); var btn=it.querySelector('.accordion-button'); var shouldOpen=open.indexOf(name)>=0; if(col && btn){ col.classList.toggle('show', shouldOpen); btn.classList.toggle('collapsed', !shouldOpen); } }); }catch(e){} }
  var originalRender = window._renderPairsGroupedForPerson || null;
  function renderPairsWithUX(pairs, pid){ var builder=(originalRender || window.renderPairsGrouped || null); if(!builder){ builder=function(ps){ return (typeof renderPairsGrouped==='function') ? renderPairsGrouped(ps) : document.createTextNode(''); }; } var acc=builder(pairs||[]); setTimeout(function(){ restoreAccState(pid); },0); return acc; }
  var pdBody=document.getElementById('person-details-body');
  function rerenderCurrent(){ try{ var pid=window.lastPid||null; if(!pid || !pdBody) return; var cache=(window.personCache && window.personCache.get) ? window.personCache.get(pid) : null; if(!cache || !cache.details) return; pdBody.innerHTML=''; var acc=renderPairsWithUX(cache.details, pid); if(acc) pdBody.appendChild(acc); saveAccState(pid); }catch(e){} }
  var tbe=getToolbarEls();
  tbe.copyJson && tbe.copyJson.addEventListener('click', function(){ try{ var pid=window.lastPid||null; if(!pid) return; var cache=window.personCache ? window.personCache.get(pid) : null; if(!cache || !cache.details) return; var text=JSON.stringify(pairsToObject(cache.details), null, 2); (navigator.clipboard && navigator.clipboard.writeText(text).catch(function(){}) ) || (function(){ var ta=document.createElement('textarea'); ta.value=text; ta.style.position='fixed'; ta.style.left='-10000px'; document.body.appendChild(ta); ta.select(); try{ if(document.execCommand) document.execCommand('copy'); }catch(e){} ta.remove(); })(); }catch(e){} });
  tbe.dlJson && tbe.dlJson.addEventListener('click', function(){ try{ var pid=window.lastPid||null; if(!pid) return; var cache=window.personCache ? window.personCache.get(pid) : null; if(!cache || !cache.details) return; var blob=new Blob([JSON.stringify(pairsToObject(cache.details), null, 2)], { type: 'application/json;charset=utf-8' }); var a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='person_' + pid + '.json'; document.body.appendChild(a); a.click(); URL.revokeObjectURL(a.href); a.remove(); }catch(e){} });
  document.addEventListener('click', function(ev){ var pid=window.lastPid||null; if(!pid) return; var btn=ev.target && ev.target.closest && ev.target.closest('#person-details-section .accordion-button'); if(btn) setTimeout(function(){ saveAccState(pid); }, 0); });
  window.__pdUx = { renderPairsWithUX: renderPairsWithUX, restoreAccState: restoreAccState, saveAccState: saveAccState, rerenderCurrent: rerenderCurrent };
  try{ var mo=new MutationObserver(function(){ var pid=window.lastPid||null; if(!pid) return; saveAccState(pid); }); if(pdBody) mo.observe(pdBody, { childList: true }); }catch(e){}
})();
    </script>

    <script nonce="@nonce">
// Clear/hide Person Details immediately on new search submit
(function(){
  var form = document.getElementById('gpip-search-form');
  if (!form) return;
  form.addEventListener('submit', function(){
    try{
      var sec = document.getElementById('person-details-section');
      var body = document.getElementById('person-details-body');
      var err = document.getElementById('person-details-error');
      var loading = document.getElementById('person-details-loading');
      if (sec) sec.classList.add('d-none');
      if (body) body.innerHTML='';
      if (err) { err.classList.add('d-none'); err.textContent=''; }
      if (loading) loading.classList.add('d-none');
      window.lastPid = null;
      if (window.personCache && window.personCache.clear) window.personCache.clear();
      try{ var url = new URL(window.location.href); url.searchParams.delete('gpivPublicId'); history.replaceState(null,'',url.toString()); }catch(e){}
    }catch(e){}
  });
})();
    </script>
}
@{
  var nonce = Context?.Items?["CSP_NONCE"] as string;
}
<div class="card shadow-sm">
  <div class="card-body">
    <div class="d-flex justify-content-between align-items-center mb-2">
      <div class="d-flex align-items-center gap-2">
        <a asp-page="/Index" class="btn btn-sm btn-outline-secondary" id="logs-back" title="Back"><i class="bi bi-arrow-left me-1" aria-hidden="true"></i>Back</a>
        <h5 class="card-title mb-0">Logs</h5>
      </div>
      <div class="d-flex gap-2">
        <button class="btn btn-sm btn-outline-secondary" id="logs-clear">Clear</button>
        <button class="btn btn-sm btn-outline-secondary" id="logs-pause">Pause</button>
      </div>
    </div>

    <div class="input-group input-group-sm mb-2 logs-filter-group">
      <span class="input-group-text">Filter</span>
      <input type="text" class="form-control" id="logs-filter" placeholder="text?">
      <select class="form-select" id="logs-level">
        <option value="">Any level</option>
        <option>Trace</option>
        <option>Debug</option>
        <option>Information</option>
        <option>Warning</option>
        <option>Error</option>
        <option>Critical</option>
      </select>
    </div>

    <div class="table-responsive logs-table-container">
      <table class="table table-sm table-striped align-middle" id="logs-table">
        <thead class="table-light position-sticky thead-sticky">
          <tr>
            <th class="th-width-ts">Timestamp (UTC)</th>
            <th class="th-width-lvl">Level</th>
            <th>Category</th>
            <th>Message</th>
          </tr>
        </thead>
        <tbody></tbody>
      </table>
    </div>
  </div>
</div>

<script nonce="@nonce">
(function(){
  var root = document.getElementById('logs-view');
  var kind = (root && root.getAttribute('data-default-kind')) || 'http';

  var paused = false;
  var filterTxt = '';
  var filterLevel = '';
  var es = null;

  var tbody = document.querySelector('#logs-table tbody');
  var filter = document.getElementById('logs-filter');
  var level = document.getElementById('logs-level');
  var clearBtn = document.getElementById('logs-clear');
  var pauseBtn = document.getElementById('logs-pause');
  var backBtn = document.getElementById('logs-back');

  function rowFor(entry){
    var tr = document.createElement('tr');
    tr.innerHTML = '<td>'+entry.timestamp+'</td>'+
                   '<td>'+entry.level+'</td>'+
                   '<td>'+entry.category+'</td>'+
                   '<td>'+escapeHtml(entry.message||'')+'</td>';
    return tr;
  }
  function escapeHtml(s){
    return String(s||'').replace(/[&<>]/g, function(ch){ return ({'&':'&amp;','<':'&lt;','>':'&gt;'}[ch]); });
  }
  function match(entry){
    if (filterLevel && String(entry.level).toLowerCase() !== filterLevel) return false;
    if (filterTxt){
      var t = (entry.message||'')+' '+(entry.category||'');
      if (t.toLowerCase().indexOf(filterTxt) < 0) return false;
    }
    return true;
  }
  function append(entry){
    if (!match(entry)) return;
    var tr = rowFor(entry);
    tbody.appendChild(tr);
  }

  function connect(){
    if (es) try { es.close(); } catch(e){ console.debug('LogsViewer: es.close failed', e); }
    es = new EventSource('/logs/stream?kind=' + encodeURIComponent(kind));
    es.onmessage = function(ev){
      if (paused) return;
      try { var entry = JSON.parse(ev.data); append(entry); } catch(e){ console.warn('LogsViewer: JSON parse failed', e); }
    };
    es.onerror = function(){ try { es.close(); } catch(e){ console.debug('LogsViewer: es.close in onerror failed', e); } setTimeout(connect, 1000); };
  }

  // initial fill (history)
  fetch('/logs?kind=' + encodeURIComponent(kind)).then(r=>r.json()).then(function(d){
    if (!d || d.ok !== true) return;
    (d.items||[]).forEach(append);
  });

  filter && filter.addEventListener('input', function(){ filterTxt = (filter.value||'').trim().toLowerCase(); });
  level && level.addEventListener('change', function(){ filterLevel = (level.value||'').trim().toLowerCase(); });
  clearBtn && clearBtn.addEventListener('click', function(){ fetch('/logs/clear', { method: 'POST' }); tbody.innerHTML=''; });
  pauseBtn && pauseBtn.addEventListener('click', function(){ paused = !paused; pauseBtn.classList.toggle('active', paused); pauseBtn.textContent = paused ? 'Resume' : 'Pause'; });

  backBtn && backBtn.addEventListener('click', function(e){
    try {
      // Prefer true back to preserve form state on Index; fallback to GET /Index
      var ref = document.referrer ? new URL(document.referrer) : null;
      if (ref && ref.origin === location.origin) {
        var p = (ref.pathname || '').toLowerCase();
        if (p === '/' || p.endsWith('/index')) { e.preventDefault(); history.back(); return; }
      }
      // Otherwise allow default anchor nav to Index
    } catch { /* let default navigate */ }
  });

  connect();
})();
</script>

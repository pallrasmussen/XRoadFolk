@using System.Text.Json
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer L
@{
    var raw = (string?)(ViewData["RawXml"]) ?? "";
    var pretty = (string?)(ViewData["PrettyXml"]) ?? "";

    var gpivI18n = new {
        NoXmlToDisplay = L["NoXmlToDisplay"].Value,
        NoXmlRoot = L["NoXmlRoot"].Value,
        FailedToRenderTreePrefix = L["FailedToRenderTreePrefix"].Value,
        NoPeopleFound = L["NoPeopleFound"].Value,
        PeopleLabel = L["PeopleLabel"].Value,
        Basics = L["Basics"].Value,
        Names = L["Names"].Value,
        Name = L["Name"].Value,
        PublicId = L["PublicId"].Value,
        DOB = L["DOB"].Value,
        Status = L["Status"].Value
    };
}
<style>
    .gpiv-card { position: relative; }
    .gpiv-toolbar { position: sticky; top: -1px; z-index: 2; background: var(--bs-body-bg); padding-top: .25rem; }
    .gpiv-card.gpiv-fullscreen { position: fixed; inset: 0; z-index: 1050; margin: 0; border-radius: 0; background: var(--bs-body-bg); }
    .gpiv-card.gpiv-fullscreen .card-body { height: 100dvh; display: flex; flex-direction: column; }
    .gpiv-card .gpiv-viewport { max-height: var(--gpiv-h, 40vh); }
    .gpiv-card.gpiv-fullscreen .gpiv-viewport { max-height: calc(100dvh - 7.5rem); }
    .gpiv-drop { display: none; position: absolute; inset: 0; z-index: 3; background: rgba(0,0,0,.05); border: 2px dashed var(--bs-secondary); align-items: center; justify-content: center; text-align: center; padding: 2rem; border-radius: .375rem; }
    .gpiv-drop .msg { font-size: .95rem; color: var(--bs-secondary); }
    @@keyframes gpivFlash { 0% { background: rgba(255, 243, 205, .9); } 100% { background: transparent; } }
    .gpiv-highlight { animation: gpivFlash 1.5s ease-out 1; }
</style>

<div class="card shadow-sm mb-4 gpiv-card">
    <div class="gpiv-drop" id="gpiv-drop">
        <div class="msg"><div class="mb-1">@L["DropXmlHint"]</div></div>
    </div>

    <div class="card-body">
        <div class="gpiv-toolbar d-flex flex-wrap gap-2 justify-content-between align-items-center mb-2 border-bottom pb-2">
          <h5 class="card-title mb-0">@L["GetPeoplePublicInfo"]</h5>
          <div class="d-flex flex-wrap gap-2 align-items-center">
            <div class="btn-group" role="group" aria-label="View mode">
              <button id="gpiv-pretty" type="button" class="btn btn-sm btn-outline-secondary" title="1">@L["Pretty"]</button>
              <button id="gpiv-tree" type="button" class="btn btn-sm btn-outline-secondary" title="3">@L["Tree"]</button>
              <button id="gpiv-summary" type="button" class="btn btn-sm btn-outline-secondary" title="4">@L["Summary"]</button>
            </div>
            <div class="btn-group" role="group" aria-label="Tree commands">
              <button id="gpiv-expand" type="button" class="btn btn-sm btn-outline-secondary" disabled title="E">@L["Expand"]</button>
              <button id="gpiv-collapse" type="button" class="btn btn-sm btn-outline-secondary" disabled title="C">@L["Collapse"]</button>
            </div>
            <div class="input-group input-group-sm" style="width: 180px;">
              <span class="input-group-text">@L["Height"]</span>
              <input id="gpiv-height" type="range" class="form-range form-control" min="30" max="90" step="5" value="40" title="@L["AdjustHeight"]">
            </div>
            <button id="gpiv-fullscreen" type="button" class="btn btn-sm btn-outline-secondary" title="@L["ToggleFullscreen"]">@L["Fullscreen"]</button>
          </div>
        </div>

        <div id="gpiv-empty" class="text-muted small mb-2" style="display:none;">@L["EmptyState"]</div>

        <pre id="gpiv-xml-pretty" class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded" style="white-space: pre; overflow: auto;">@pretty</pre>

        <div id="gpiv-xml-tree" class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded" style="display:none; overflow:auto; font-family: var(--bs-font-monospace, ui-monospace, SFMono-Regular, Menlo, Consolas, monospace);"></div>
        <div id="gpiv-xml-summary" class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded" style="display:none; overflow:auto;"></div>
    </div>
</div>

<script type="application/json" id="gpiv-i18n-json">@Html.Raw(JsonSerializer.Serialize(gpivI18n))</script>
<script type="application/json" id="gpiv-raw-json">@Html.Raw(JsonSerializer.Serialize(raw))</script>
<script type="application/json" id="gpiv-pretty-json">@Html.Raw(JsonSerializer.Serialize(pretty))</script>

<script>
(function () {
    var I18N = {};
    try {
        var i18nEl = document.getElementById('gpiv-i18n-json');
        if (i18nEl) I18N = JSON.parse(i18nEl.textContent || '{}');
    } catch {}

    var prettyBtn = document.getElementById('gpiv-pretty');
    var treeBtn = document.getElementById('gpiv-tree');
    var summaryBtn = document.getElementById('gpiv-summary');
    var expandBtn = document.getElementById('gpiv-expand');
    var collapseBtn = document.getElementById('gpiv-collapse');
    var heightRange = document.getElementById('gpiv-height');
    var fullscreenBtn = document.getElementById('gpiv-fullscreen');
    var dropOverlay = document.getElementById('gpiv-drop');

    var prePretty = document.getElementById('gpiv-xml-pretty');
    var preRaw = document.getElementById('gpiv-xml-raw'); // may not exist
    var treeHost = document.getElementById('gpiv-xml-tree');
    var summaryHost = document.getElementById('gpiv-xml-summary');
    var emptyMsg = document.getElementById('gpiv-empty');
    var card = document.querySelector('.gpiv-card');

    var sourcePretty = prePretty ? (prePretty.textContent || '') : '';
    var sourceRaw = preRaw ? (preRaw.textContent || '') : '';

    var prefKey = 'gpiv-pref-v1';
    var mode = 'pretty';
    var saved = null;
    try { saved = JSON.parse(localStorage.getItem(prefKey) || 'null'); } catch {}
    if (saved && typeof saved.mode === 'string' ) mode = saved.mode;
    if (mode === 'raw') mode = 'pretty';
    var savedH = saved && typeof saved.h === 'number' ? saved.h : 40;
    if (heightRange) { heightRange.value = savedH; if (card) card.style.setProperty('--gpiv-h', savedH + 'vh'); }

    function savePrefs() {
        try {
            localStorage.setItem(prefKey, JSON.stringify({
                mode: mode,
                h: heightRange ? parseInt(heightRange.value || '40', 10) : 40
            }));
        } catch {}
    }

    function parseXml(text) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(text, 'application/xml');
        var err = doc.querySelector('parsererror');
        if (err) throw new Error(err.textContent || 'Invalid XML');
        return doc;
    }
    function el(tag, cls, text) {
        var e = document.createElement(tag);
        if (cls) e.className = cls;
        if (text != null) e.textContent = text;
        return e;
    }

    // Summary helpers
    function isNil(node) {
      if (!node || node.nodeType !== 1 || !node.attributes) return false;
      for (var i = 0; i < node.attributes.length; i++) {
        var a = node.attributes[i];
        var ln = a.localName || a.name;
        if (ln === 'nil' && /^(true|1)$/i.test((a.value || '').trim())) return true;
      }
      return false;
    }
    function hasElementChildren(node) {
      if (!node || !node.children) return false;
      for (var i = 0; i < node.children.length; i++) if (!isNil(node.children[i])) return true;
      return false;
    }
    function isNoiseKey(name) {
      if (!name) return false;
      var n = String(name).toLowerCase();
      return n === 'id' || n === 'fixed' || n === 'authoritycode' || n === 'personaddressid';
    }
    var atSign = String.fromCharCode(64);
    function buildKvpTableIncludingAttributes(owner) {
      var rows = [];
      if (owner && owner.attributes && owner.attributes.length) {
        for (var i = 0; i < owner.attributes.length; i++) {
          var a = owner.attributes[i];
          var attrName = a.localName || a.name || '';
          if (isNoiseKey(attrName)) continue; // filter noise attributes
          rows.push({ key: atSign + (a.name || ''), val: (a.value || '') });
        }
      }
      var kids = owner && owner.children ? owner.children : [];
      for (var k = 0; k < kids.length; k++) {
        var ch = kids[k];
        if (isNil(ch)) continue;
        if (!hasElementChildren(ch)) {
          if (isNoiseKey(ch.localName)) continue; // filter noise elements
          rows.push({ key: ch.localName, val: (ch.textContent || '').trim() });
          if (ch.attributes && ch.attributes.length) {
            for (var a2 = 0; a2 < ch.attributes.length; a2++) {
              var at = ch.attributes[a2];
              var atName = at.localName || at.name || '';
              if (isNoiseKey(atName)) continue; // filter noise child attributes
              rows.push({ key: ch.localName + ' ' + atSign + (at.name || ''), val: (at.value || '') });
            }
          }
        }
      }
      if (!rows.length) return null;
      var t = document.createElement('table'); t.className = 'table table-sm table-striped align-middle mb-2';
      var tb = document.createElement('tbody');
      for (var r = 0; r < rows.length; r++) {
        var tr = document.createElement('tr');
        var th = document.createElement('th'); th.className = 'text-muted fw-normal'; th.style.width = '40%'; th.textContent = rows[r].key;
        var td = document.createElement('td'); td.textContent = rows[r].val;
        tr.appendChild(th); tr.appendChild(td); tb.appendChild(tr);
      }
      t.appendChild(tb);
      return t;
    }
    function getTextLocal(elx, name) {
      if (!elx || !elx.children) return '';
      for (var i = 0; i < elx.children.length; i++) {
        var c = elx.children[i];
        if (c.localName === name) return (c.textContent || '').trim();
      }
      return '';
    }
    function badge(text) {
      var b = document.createElement('span');
      b.className = 'badge text-bg-light';
      b.textContent = text;
      return b;
    }

    // Tree
    function buildTree(node) {
        if (!node || node.nodeType !== 1) return document.createTextNode('');
        var details = el('details', 'xml-node', null);
        details.open = false;
        var sum = el('summary', 'xml-summary', null);
        sum.appendChild(el('span', 'xml-name fw-bold', node.nodeName));
        if (node.attributes && node.attributes.length) {
            var attrs = [];
            for (var i = 0; i < node.attributes.length; i++) { var a = node.attributes[i]; attrs.push(a.name + '="' + a.value + '"'); }
            sum.appendChild(el('span', 'text-muted ms-2', attrs.join(' ')));
        }
        var hasChildren = false;
        for (var c = 0; c < node.childNodes.length; c++) if (node.childNodes[c].nodeType === 1) { hasChildren = true; break; }
        var txt = (node.textContent || '').trim();
        if (!hasChildren && txt) sum.appendChild(el('span', 'xml-text ms-2', '= "' + txt + '"'));
        details.appendChild(sum);
        for (var j = 0; j < node.childNodes.length; j++) { var ch = node.childNodes[j]; if (ch.nodeType === 1) details.appendChild(buildTree(ch)); }
        return details;
    }

    function renderTree() {
        treeHost.innerHTML = '';
        try {
            var xmlText = (sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || '');
            if (!xmlText || !xmlText.trim()) { treeHost.textContent = I18N.NoXmlToDisplay || 'No XML to display.'; return; }
            var xml = parseXml(xmlText);
            if (!xml.documentElement) { treeHost.textContent = I18N.NoXmlRoot || 'No XML root element.'; return; }
            var tree = buildTree(xml.documentElement);
            tree.open = true;
            treeHost.appendChild(tree);
        } catch (e) {
            var pfx = I18N.FailedToRenderTreePrefix || 'Failed to render tree:';
            treeHost.textContent = pfx + ' ' + (e && e.message ? e.message : e);
        }
    }

    // Summary
    function renderSummary() {
        function buildDetailsLocal(node, title) {
            var d = document.createElement('details');
            d.className = 'summary-group';
            d.open = false;
            var s = document.createElement('summary');
            s.className = 'fw-semibold';
            s.textContent = title || (node && node.localName) || '';
            d.appendChild(s);
            var table = buildKvpTableIncludingAttributes(node);
            if (table) d.appendChild(table);
            var kids = (node && node.children) ? node.children : [];
            for (var i = 0; i < kids.length; i++) {
                var k = kids[i];
                if (!isNil(k) && hasElementChildren(k)) {
                    d.appendChild(buildDetailsLocal(k));
                }
            }
            return d;
        }

        summaryHost.innerHTML = '';
        try {
            var xmlText = (sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || '');
            if (!xmlText.trim()) { summaryHost.textContent = I18N.NoXmlToDisplay || 'No XML to display.'; return; }
            var xml = parseXml(xmlText);
            var people = []; var all = xml.getElementsByTagName('*');
            for (var i = 0; i < all.length; i++) if (all[i].localName === 'PersonPublicInfo') people.push(all[i]);
            if (people.length === 0) { summaryHost.appendChild(el('div', 'text-muted', I18N.NoPeopleFound || 'No PersonPublicInfo elements found.')); return; }

            var hdr = el('div', 'mb-2 d-flex align-items-center gap-2', null);
            hdr.appendChild(el('strong', null, (I18N.PeopleLabel || 'People') + ': ' + people.length));
            summaryHost.appendChild(hdr);

            for (var p = 0; p < people.length; p++) {
                var person = people[p];

                var wrap = el('div', 'mb-3 p-2 border rounded', null);
                wrap.setAttribute('data-idx', String(p));

                var header = el('div', 'd-flex flex-wrap gap-2 align-items-baseline mb-2', null);
                header.appendChild(el('span', 'badge text-bg-secondary', '#' + (p + 1)));

                var nameRoot = null;
                for (var nc = 0; nc < person.children.length; nc++) { if (person.children[nc].localName === 'Names') { nameRoot = person.children[nc]; break; } }
                var fullName = '';
                if (nameRoot) {
                    var firsts = []; var last = '';
                    for (var nn = 0; nn < nameRoot.children.length; nn++) {
                        var nm = nameRoot.children[nn]; if (nm.localName !== 'Name' || isNil(nm)) continue;
                        var tp = getTextLocal(nm, 'Type'); if (tp === 'FirstName') {
                            var order = parseInt(getTextLocal(nm, 'Order') || '9999', 10);
                            firsts.push({ o: isNaN(order) ? 9999 : order, v: getTextLocal(nm, 'Value') });
                        } else if (tp === 'LastName') last = getTextLocal(nm, 'Value') || last;
                    }
                    firsts.sort(function (a, b) { return a.o - b.o; });
                    var joined = []; for (var fj = 0; fj < firsts.length; fj++) joined.push(firsts[fj].v);
                    fullName = (joined.join(' ') + ' ' + last).trim();
                }
                var nameEl = document.createElement('strong'); nameEl.textContent = fullName || '-'; header.appendChild(nameEl);

                var publicId = getTextLocal(person, 'PublicId') || getTextLocal(person, 'PersonId');
                var dob = (getTextLocal(person, 'DateOfBirth') || '').slice(0, 10);
                // var civil = getTextLocal(person, 'CivilStatus'); // removed from header display

                if (publicId) {
                    var pidBtn = document.createElement('button');
                    pidBtn.type = 'button';
                    pidBtn.className = 'btn btn-sm btn-outline-secondary gpiv-pid';
                    pidBtn.setAttribute('data-public-id', publicId);
                    pidBtn.textContent = (I18N.PublicId || 'PublicId') + ': ' + publicId;
                    header.appendChild(pidBtn);
                }

                if (dob) header.appendChild(badge((I18N.DOB || 'DOB') + ': ' + dob));
                // if (civil) header.appendChild(badge((I18N.Status || 'Status') + ': ' + civil)); // do not show status in People header

                wrap.appendChild(header);

                if (nameRoot) {
                    var namesSection = document.createElement('details'); namesSection.className = 'summary-group'; namesSection.open = false;
                    var namesSum = document.createElement('summary'); namesSum.className = 'fw-semibold'; namesSum.textContent = I18N.Names || 'Names';
                    namesSection.appendChild(namesSum);
                    var list = document.createElement('div'); list.className = 'd-flex flex-column gap-2';

                    // Collect Name entries and sort by <Order>
                    var nameItems = [];
                    for (var n2 = 0; n2 < nameRoot.children.length; n2++) {
                        var nItem = nameRoot.children[n2];
                        if (nItem.localName !== 'Name' || isNil(nItem)) continue;
                        var ord = parseInt(getTextLocal(nItem, 'Order') || '9999', 10);
                        if (isNaN(ord)) ord = 9999;
                        nameItems.push({ node: nItem, order: ord });
                    }
                    nameItems.sort(function(a,b){ return a.order - b.order; });

                    for (var ix = 0; ix < nameItems.length; ix++) {
                        var nNode = nameItems[ix].node;
                        var card2 = el('div', 'p-2 border rounded', null);
                        var title2 = el('div', 'small text-muted mb-1', (I18N.Name || 'Name') + ' #' + (ix + 1));
                        card2.appendChild(title2);
                        var t2 = buildKvpTableIncludingAttributes(nNode); if (t2) card2.appendChild(t2);
                        list.appendChild(card2);
                    }

                    namesSection.appendChild(list);
                    wrap.appendChild(namesSection);
                }

                var basics = document.createElement('details'); basics.className = 'summary-group'; basics.open = false;
                var basicsSum = document.createElement('summary'); basicsSum.className = 'fw-semibold'; basicsSum.textContent = I18N.Basics || 'Basics';
                basics.appendChild(basicsSum);
                var basicsTable = buildKvpTableIncludingAttributes(person); if (basicsTable) basics.appendChild(basicsTable);
                wrap.appendChild(basics);

                var groups = [];
                for (var g = 0; g < person.children.length; g++) {
                    var ch = person.children[g]; if (isNil(ch)) continue; if (ch.localName === 'Names' || ch.localName === 'CivilStatus') continue; if (hasElementChildren(ch)) groups.push(ch);
                }
                for (var gi = 0; gi < groups.length; gi++) {
                    var group = groups[gi];
                    var counts = {}; for (var kk = 0; kk < group.children.length; kk++) { var lk = group.children[kk]; if (isNil(lk)) continue; var nm2 = lk.localName; counts[nm2] = (counts[nm2] || 0) + 1; }
                    var repeated = null; for (var key in counts) { if (counts[key] > 1) { repeated = key; break; } }

                    var section = document.createElement('details'); section.className = 'summary-group'; section.open = false;
                    var secSum = document.createElement('summary'); secSum.className = 'fw-semibold'; secSum.textContent = group.localName;
                    section.appendChild(secSum);

                    if (repeated) {
                        var items = []; for (var ii = 0; ii < group.children.length; ii++) { var it = group.children[ii]; if (!isNil(it) && it.localName === repeated) items.push(it); }
                        var listWrap = document.createElement('div'); listWrap.className = 'd-flex flex-column gap-2';
                        for (var itx = 0; itx < items.length; itx++) {
                            var card3 = el('div', 'p-2 border rounded', null);
                            var title3 = el('div', 'small text-muted mb-1', repeated + ' #' + (itx + 1));
                            card3.appendChild(title3);
                            var leaves2 = buildKvpTableIncludingAttributes(items[itx]); if (leaves2) card3.appendChild(leaves2);
                            var nested = []; for (var nc = 0; nc < items[itx].children.length; nc++) { var kid = items[itx].children[nc]; if (!isNil(kid) && hasElementChildren(kid)) nested.push(kid); }
                            for (var nx = 0; nx < nested.length; nx++) card3.appendChild(buildDetailsLocal(nested[nx]));
                            listWrap.appendChild(card3);
                        }
                        section.appendChild(listWrap);
                    } else {
                        var leaves = buildKvpTableIncludingAttributes(group); if (leaves) section.appendChild(leaves);
                        var subComplex = []; for (var sc = 0; sc < group.children.length; sc++) { var scn = group.children[sc]; if (!isNil(scn) && hasElementChildren(scn)) subComplex.push(scn); }
                        for (var sx = 0; sx < subComplex.length; sx++) section.appendChild(buildDetailsLocal(subComplex[sx]));
                    }
                    wrap.appendChild(section);
                }
                summaryHost.appendChild(wrap);
            }
        } catch (e) {
            summaryHost.textContent = (I18N.FailedToBuildSummaryPrefix || 'Failed to build summary:') + ' ' + (e && e.message ? e.message : e);
        }
    }

    // Expand/Collapse helpers (tree & summary)
    function expandAll(open) {
        if (!treeHost) return;
        var nodes = treeHost.querySelectorAll('details.xml-node');
        for (var i = 0; i < nodes.length; i++) nodes[i].open = !!open;
    }
    function expandSummaryAll(open) {
        if (!summaryHost) return;
        var groups = summaryHost.querySelectorAll('details.summary-group');
        for (var i = 0; i < groups.length; i++) groups[i].open = !!open;
    }

    function setActive() {
        var btns = [prettyBtn, treeBtn, summaryBtn];
        for (var i = 0; i < btns.length; i++) if (btns[i]) btns[i].classList.remove('active');
        if (mode === 'pretty' && prettyBtn) prettyBtn.classList.add('active');
        if (mode === 'tree' && treeBtn) treeBtn.classList.add('active');
        if (mode === 'summary' && summaryBtn) summaryBtn.classList.add('active');
    }

    function updateView() {
        var combined = (sourceRaw && sourceRaw.trim()) || (sourcePretty && sourcePretty.trim()) || '';
        var hasAny = combined.length > 0;

        if (emptyMsg) emptyMsg.style.display = hasAny ? 'none' : 'block';
        if (prePretty) prePretty.style.display = (mode === 'pretty') ? 'block' : 'none';
        if (treeHost) treeHost.style.display  = (mode === 'tree')   ? 'block' : 'none';
        if (summaryHost) summaryHost.style.display = (mode === 'summary') ? 'block' : 'none';
        if (prePretty) prePretty.textContent = (sourcePretty || '');

        var treeActive = (mode === 'tree');
        var summaryActive = (mode === 'summary');

        if (treeActive && hasAny) renderTree();
        if (summaryActive && hasAny) renderSummary();

        var canExpand = false;
        if (treeActive) {
            canExpand = !!(treeHost && treeHost.querySelector('details.xml-node'));
        } else if (summaryActive) {
            canExpand = !!(summaryHost && summaryHost.querySelector('details.summary-group'));
        }
        if (expandBtn) expandBtn.disabled = !canExpand;
        if (collapseBtn) collapseBtn.disabled = !canExpand;

        setActive();
        savePrefs();
    }

    // Load: Drag & Drop only
    function setXmlFromText(text) {
        if (!text || !text.trim()) return;
        sourceRaw = text; sourcePretty = text;
        updateView();
    }
    function showDrop(v) { if (dropOverlay) dropOverlay.style.display = v ? 'flex' : 'none'; }
    card && card.addEventListener('dragenter', function (e) { e.preventDefault(); showDrop(true); });
    card && card.addEventListener('dragover', function (e) { e.preventDefault(); showDrop(true); });
    card && card.addEventListener('dragleave', function (e) { e.preventDefault(); showDrop(false); });
    card && card.addEventListener('drop', function (e) {
        e.preventDefault(); showDrop(false);
        var dt = e.dataTransfer; if (!dt) return;
        if (dt.files && dt.files.length) {
            var f = dt.files[0]; var reader = new FileReader();
            reader.onload = function () { setXmlFromText(String(reader.result || '')); };
            reader.readAsText(f);
        } else {
            var txt = dt.getData('text') || '';
            setXmlFromText(txt);
        }
    });

    // Toolbar actions
    prettyBtn && prettyBtn.addEventListener('click', function(){ mode='pretty'; updateView(); });
    treeBtn && treeBtn.addEventListener('click',   function(){ mode='tree';   updateView(); });
    summaryBtn && summaryBtn.addEventListener('click',function(){ mode='summary'; updateView(); });
    expandBtn && expandBtn.addEventListener('click',   function(){ if (mode==='summary') expandSummaryAll(true); else expandAll(true); });
    collapseBtn && collapseBtn.addEventListener('click', function(){ if (mode==='summary') expandSummaryAll(false); else expandAll(false); });
    heightRange && heightRange.addEventListener('input', function () { var v = parseInt(heightRange.value || '40', 10); if (card) card.style.setProperty('--gpiv-h', v + 'vh'); savePrefs(); });
    fullscreenBtn && fullscreenBtn.addEventListener('click', function () { if (card) card.classList.toggle('gpiv-fullscreen'); });

    // Keyboard shortcuts
    document.addEventListener('keydown', function (e) {
        var t = e.target;
        var tag = t && t.tagName ? t.tagName.toLowerCase() : '';
        var inEditable = t && (t.isContentEditable || tag === 'input' || tag === 'textarea' || tag === 'select');
        if (inEditable) return;

        if (e.key === '1') { if (prettyBtn) prettyBtn.click(); }
        if (e.key === '3') { if (treeBtn)   treeBtn.click(); }
        if (e.key === '4') { if (summaryBtn) summaryBtn.click(); }
        if (e.key.toLowerCase() === 'e') { if (!expandBtn || expandBtn.disabled) return; expandBtn.click(); }
        if (e.key.toLowerCase() === 'c' && !(e.ctrlKey || e.metaKey)) { if (!collapseBtn || collapseBtn.disabled) return; collapseBtn.click(); }
    });

    window.gpiv = {
        setXml: function (raw, pretty) {
            if (typeof raw === 'string') sourceRaw = raw;
            if (typeof pretty === 'string') sourcePretty = pretty; else if (typeof raw === 'string' ) sourcePretty = raw;
            if (preRaw) preRaw.textContent = (sourceRaw || '');
            if (prePretty) prePretty.textContent = (sourcePretty || '');
            updateView();
        },
        focusPerson: function (publicId) {
            if (!publicId) return;
            mode = 'summary'; updateView();
            var badges = summaryHost.querySelectorAll('.gpiv-pid');
            for (var i = 0; i < badges.length; i++) {
                if ((badges[i].textContent || '').indexOf(publicId) >= 0) {
                    var wrap = badges[i];
                    while (wrap && wrap !== summaryHost && !wrap.classList.contains('border')) wrap = wrap.parentElement;
                    if (wrap && wrap.scrollIntoView) { wrap.scrollIntoView({ block: 'center' }); wrap.classList.add('gpiv-highlight'); setTimeout(function () { wrap.classList.remove('gpiv-highlight'); }, 1500); }
                    break;
                }
            }
        }
    };

    try {
        var qs = new URLSearchParams(window.location.search);
        var linkPid = qs.get('gpivPublicId');
        if (linkPid) { setTimeout(function () { window.gpiv.focusPerson(linkPid); }, 50); }
    } catch {}

    updateView();
})();
</script>
<script>
(function () {
    try {
        var rawEl = document.getElementById('gpiv-raw-json');
        var prettyEl = document.getElementById('gpiv-pretty-json');
        var raw = rawEl ? JSON.parse(rawEl.textContent || '""') : "";
        var pretty = prettyEl ? JSON.parse(prettyEl.textContent || '""') : "";
        if (window.gpiv && (raw || pretty)) window.gpiv.setXml(raw, pretty);
    } catch {}
})();
</script>
<script>
// Restore PublicId click -> load PersonDetails panel behavior (logs removed)
(function(){
  if (window.__gpivPidHooked) return;
  window.__gpivPidHooked = true;

  var personCache = (window.personCache instanceof Map) ? window.personCache : (window.personCache = new Map());
  var lastPid = window.lastPid || null;

  function getPanelEls() {
    return {
      sec: document.getElementById('person-details-section'),
      body: document.getElementById('person-details-body'),
      err: document.getElementById('person-details-error'),
      loading: document.getElementById('person-details-loading'),
      title: document.querySelector('#person-details-section .card-title')
    };
  }
  function showLoading(on){
    var e=getPanelEls(); if(!e.sec) return;
    e.sec.classList.remove('d-none');
    if(e.err){ e.err.classList.add('d-none'); e.err.textContent=''; }
    if(e.loading){ e.loading.classList.toggle('d-none', !on); }
  }
  function clearPanel(){
    var e=getPanelEls(); if(!e.sec) return;
    e.sec.classList.remove('d-none');
    if(e.err){ e.err.classList.add('d-none'); e.err.textContent=''; }
    if(e.body){ e.body.innerHTML=''; }
    if(e.loading){ e.loading.classList.add('d-none'); }
  }
  function ensureShownAndFocus(){
    var e=getPanelEls(); if(!e.sec) return;
    e.sec.classList.remove('d-none');
    if(e.title){
      e.title.setAttribute('tabindex','-1');
      try{ e.title.focus({preventScroll:true}); }catch{}
      try{ e.title.scrollIntoView({block:'start', behavior:'smooth'});}catch{}
    }
  }
  function markSelectedSummaryCard(fromEl){
    try {
      var host = document.getElementById('gpiv-xml-summary'); if (!host) return;
      var prev = host.querySelector('.gpiv-active-card'); if (prev) prev.classList.remove('gpiv-active-card');
      var wrap = fromEl;
      while (wrap && wrap !== host && !(wrap.classList && wrap.classList.contains('border') && wrap.classList.contains('rounded'))) wrap = wrap.parentElement;
      if (wrap && wrap !== host) wrap.classList.add('gpiv-active-card');
    } catch {}
  }

  function defaultRenderPairsGrouped(pairs){
    var groups = {};
    (pairs||[]).forEach(function(p){
      var k=p.key||'', v=p.value||'';
      var seg=k.includes('.') ? k.slice(0,k.indexOf('.')) : k;
      (groups[seg]=groups[seg]||[]).push({k:k,v:v});
    });
    var keys = Object.keys(groups).sort(function(a,b){
      var ai=a.toLowerCase()==='summary'?0:1, bi=b.toLowerCase()==='summary'?0:1;
      return (ai-bi)||a.localeCompare(b);
    });
    var accId='pd-acc-'+Date.now();
    var acc=document.createElement('div'); acc.className='accordion'; acc.id=accId;

    keys.forEach(function(name, gi){
      var items=groups[name].slice().sort(function(x,y){ return x.k.localeCompare(y.k); });
      var hid=accId+'-h-'+gi, cid=accId+'-c-'+gi;

      var item=document.createElement('div'); item.className='accordion-item'; item.setAttribute('data-group', name);

      var h2=document.createElement('h2'); h2.className='accordion-header'; h2.id=hid;
      var btn=document.createElement('button'); btn.className='accordion-button'+(name.toLowerCase()==='summary'?'':' collapsed');
      btn.type='button'; btn.setAttribute('data-bs-toggle','collapse'); btn.setAttribute('data-bs-target','#'+cid);
      btn.setAttribute('aria-expanded', name.toLowerCase()==='summary'?'true':'false'); btn.setAttribute('aria-controls', cid);
      btn.textContent=name; h2.appendChild(btn);

      var col=document.createElement('div'); col.id=cid; col.className='accordion-collapse collapse'+(name.toLowerCase()==='summary'?' show':'');
      col.setAttribute('aria-labelledby', hid); col.setAttribute('data-bs-parent','#'+accId);

      var body=document.createElement('div'); body.className='accordion-body p-0';
      var respWrap=document.createElement('div'); respWrap.className='table-responsive';
      var table=document.createElement('table'); table.className='table table-sm table-striped align-middle mb-0';
      var tb=document.createElement('tbody');

      items.forEach(function(it){
        var k=it.k, v=it.v;
        var lastDot=k.lastIndexOf('.'); var sub=lastDot>=0?k.slice(lastDot+1):k;
        var bpos=sub.indexOf('['); if(bpos>=0) sub=sub.slice(0,bpos);
        var tr=document.createElement('tr');
        var th=document.createElement('th'); th.className='text-muted fw-normal'; th.style.width='36%'; th.textContent=sub;
        var td=document.createElement('td'); td.textContent=v;
        tr.appendChild(th); tr.appendChild(td); tb.appendChild(tr);
      });

      table.appendChild(tb); respWrap.appendChild(table); body.appendChild(respWrap); col.appendChild(body);
      item.appendChild(h2); item.appendChild(col); acc.appendChild(item);
    });
    return acc;
  }

  async function fetchDetails(publicId){
    var url = new URL(window.location.href);
    url.searchParams.set('handler','PersonDetails');
    url.searchParams.set('publicId', publicId);
    var resp = await fetch(url.toString(), { headers: { 'Accept':'application/json' } });
    var ct = (resp.headers.get('content-type') || '').toLowerCase();
    var data = null;
    if (ct.includes('application/json')) data = await resp.json();
    else { var text = await resp.text(); data = { ok: false, error: text && text.length < 500 ? text : 'Non-JSON response (' + resp.status + ')' }; }
    if (!resp.ok) data.ok = false;
    return data;
  }

  async function loadPerson(publicId, sourceEl){
    window.lastPid = lastPid = publicId;
    var els = getPanelEls();
    if(!publicId || !els.body) return;

    var cached = personCache.get(publicId);
    if (cached && cached.details && cached.details.length) {
      clearPanel();
      var builder = (window._renderPairsGroupedForPerson || defaultRenderPairsGrouped);
      var accCached = builder(cached.details);
      if (accCached) els.body.appendChild(accCached);
      ensureShownAndFocus();
    } else {
      clearPanel(); showLoading(true);
    }

    try {
      var data = await fetchDetails(publicId);
      showLoading(false);

      if (!data || data.ok !== true) {
        if (els.err) {
          var msg = (data && data.error) ? String(data.error) : 'Failed to load details.';
          els.err.innerHTML = msg + ' <button type="button" id="pd-retry" class="btn btn-sm btn-outline-secondary ms-2">Retry</button>';
          els.err.classList.remove('d-none');
          var retry = document.getElementById('pd-retry');
          retry && retry.addEventListener('click', function(){ loadPerson(publicId, sourceEl); });
          ensureShownAndFocus();
        }
        return;
      }

      if (!data.details || !data.details.length) {
        clearPanel();
        return;
      }

      personCache.set(publicId, { details: data.details || [], ts: Date.now() });

      clearPanel();
      var builder2 = (window._renderPairsGroupedForPerson || defaultRenderPairsGrouped);
      var acc = builder2(data.details || []);
      if (acc) els.body.appendChild(acc);
      ensureShownAndFocus();

      if (sourceEl) markSelectedSummaryCard(sourceEl);

      try{
        var link = new URL(window.location.href);
        link.searchParams.set('gpivPublicId', publicId);
        history.pushState(null,'',link.toString());
      }catch{}
    } catch (err) {
      showLoading(false);
      if (els.err) {
        els.err.innerHTML = 'Failed to load details. <button type="button" id="pd-retry" class="btn btn-sm btn-outline-secondary ms-2">Retry</button>';
        els.err.classList.remove('d-none');
        var retry2 = document.getElementById('pd-retry');
        retry2 && retry2.addEventListener('click', function(){ loadPerson(publicId, sourceEl); });
        ensureShownAndFocus();
      }
      try { console.error('GetPerson fetch failed', err); } catch {}
    }
  }

  document.addEventListener('click', function(e){
    var t = e.target;
    if(!t || !t.classList || !t.classList.contains('gpiv-pid')) return;
    if(e.ctrlKey || e.metaKey) return;
    e.preventDefault();
    var pid = t.getAttribute('data-public-id') || '';
    if(!pid){
      var txt = t.textContent || '';
      var parts = txt.split(':');
      pid = parts.length>1 ? parts.slice(1).join(':').trim() : '';
    }
    if(pid) loadPerson(pid, t);
  });

  try{
    var qs=new URLSearchParams(window.location.search);
    var pid=qs.get('gpivPublicId');
    if(pid){
      if(document.readyState==='loading') {
        window.addEventListener('DOMContentLoaded', function(){ loadPerson(pid); });
      } else {
        loadPerson(pid);
      }
    }
  }catch{}
})();
</script>
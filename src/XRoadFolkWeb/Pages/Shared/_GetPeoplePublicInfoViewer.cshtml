@{
    var raw = (string?)(ViewData["RawXml"]) ?? "";
    var pretty = (string?)(ViewData["PrettyXml"]) ?? "";
}
<div class="card shadow-sm mb-4">
    <div class="card-body">
        <div class="d-flex flex-wrap gap-2 justify-content-between align-items-center mb-2">
            <h5 class="card-title mb-0">GetPeoplePublicInfo</h5>
            <div class="d-flex flex-wrap gap-2 align-items-center">
                <div class="btn-group" role="group" aria-label="View mode">
                    <button id="gpiv-pretty" type="button" class="btn btn-sm btn-outline-secondary">Pretty</button>
                    <button id="gpiv-raw" type="button" class="btn btn-sm btn-outline-secondary">Raw</button>
                    <button id="gpiv-tree" type="button" class="btn btn-sm btn-outline-secondary">Tree</button>
                    <button id="gpiv-summary" type="button" class="btn btn-sm btn-outline-secondary">Summary</button>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="gpiv-mask">
                    <label class="form-check-label" for="gpiv-mask">Mask sensitive</label>
                </div>
                <div class="input-group input-group-sm" style="width: 240px;">
                    <span class="input-group-text">Search</span>
                    <input id="gpiv-search" type="text" class="form-control" placeholder="tag/value…">
                    <button id="gpiv-clearsearch" class="btn btn-outline-secondary" type="button" title="Clear">×</button>
                </div>
                <div class="btn-group" role="group" aria-label="Tree commands">
                    <button id="gpiv-expand" type="button" class="btn btn-sm btn-outline-secondary" disabled>Expand</button>
                    <button id="gpiv-collapse" type="button" class="btn btn-sm btn-outline-secondary" disabled>Collapse</button>
                </div>
                <div class="btn-group" role="group" aria-label="Export">
                    <button id="gpiv-copy" type="button" class="btn btn-sm btn-outline-secondary">Copy</button>
                    <button id="gpiv-download" type="button" class="btn btn-sm btn-outline-secondary">Download</button>
                </div>
            </div>
        </div>

        <div id="gpiv-empty" class="text-muted small mb-2" style="display:none;">No response loaded yet.</div>

        <pre id="gpiv-xml-pretty"
             class="mb-0 small bg-body-tertiary p-3 border rounded"
             style="white-space: pre; overflow: auto; max-height: 40vh;">@pretty</pre>

        <pre id="gpiv-xml-raw"
             class="mb-0 small bg-body-tertiary p-3 border rounded"
             style="white-space: pre; overflow: auto; max-height: 40vh; display:none;">@raw</pre>

        <div id="gpiv-xml-tree"
             class="mb-0 small bg-body-tertiary p-3 border rounded"
             style="display:none; overflow:auto; max-height:40vh; font-family: var(--bs-font-monospace, ui-monospace, SFMono-Regular, Menlo, Consolas, monospace);">
        </div>

        <div id="gpiv-xml-summary"
             class="mb-0 small bg-body-tertiary p-3 border rounded"
             style="display:none; overflow:auto; max-height:40vh;">
        </div>
    </div>
</div>

<script>
(function () {
    var prettyBtn = document.getElementById('gpiv-pretty');
    var rawBtn = document.getElementById('gpiv-raw');
    var treeBtn = document.getElementById('gpiv-tree');
    var summaryBtn = document.getElementById('gpiv-summary');
    var copyBtn = document.getElementById('gpiv-copy');
    var downloadBtn = document.getElementById('gpiv-download');
    var expandBtn = document.getElementById('gpiv-expand');
    var collapseBtn = document.getElementById('gpiv-collapse');
    var maskChk = document.getElementById('gpiv-mask');
    var search = document.getElementById('gpiv-search');
    var clearSearch = document.getElementById('gpiv-clearsearch');

    var prePretty = document.getElementById('gpiv-xml-pretty');
    var preRaw = document.getElementById('gpiv-xml-raw');
    var treeHost = document.getElementById('gpiv-xml-tree');
    var summaryHost = document.getElementById('gpiv-xml-summary');
    var emptyMsg = document.getElementById('gpiv-empty');

    var sourcePretty = prePretty ? (prePretty.textContent || '') : '';
    var sourceRaw = preRaw ? (preRaw.textContent || '') : '';

    var prefKey = 'gpiv-pref-v1';
    var mode = 'pretty';
    try {
        var saved = JSON.parse(localStorage.getItem(prefKey) || 'null');
        if (saved && typeof saved.mode === 'string') mode = saved.mode;
        if (saved && typeof saved.mask === 'boolean') maskChk.checked = saved.mask;
    } catch {}

    function savePrefs() {
        try { localStorage.setItem(prefKey, JSON.stringify({ mode: mode, mask: !!maskChk.checked })); } catch {}
    }

    function maskValue(val) {
        if (!val) return val;
        // basic masking rules (tweak as needed)
        val = val.replace(/(<SSN>)([^<]+)(<\/SSN>)/gi, function (_, a, mid, b) {
            var digits = (mid || '').replace(/\D/g, '');
            if (!digits) return a + mid + b;
            var masked = digits.length <= 3 ? new Array(digits.length + 1).join('*') : new Array(digits.length - 3 + 1).join('*') + digits.slice(-3);
            return a + masked + b;
        });
        val = val.replace(/(<token>)([^<]+)(<\/token>)/gi, '$1***$3');
        val = val.replace(/(Authorization\s*:\s*)([^\r\n]+)/gi, '$1***');
        return val;
    }
    function getDisplayText(text) {
        return maskChk && maskChk.checked ? maskValue(text) : text;
    }
    function parseXml(text) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(text, 'application/xml');
        var err = doc.querySelector('parsererror');
        if (err) throw new Error(err.textContent || 'Invalid XML');
        return doc;
    }
    function el(tag, cls, text) {
        var e = document.createElement(tag);
        if (cls) e.className = cls;
        if (text != null) e.textContent = text;
        return e;
    }

    function buildTree(node) {
        if (!node || node.nodeType !== 1) return document.createTextNode('');
        var details = el('details', 'xml-node', null);
        details.open = false;
        var sum = el('summary', 'xml-summary', null);
        sum.appendChild(el('span', 'xml-name fw-bold', node.nodeName));
        if (node.attributes && node.attributes.length) {
            var attrs = [];
            for (var i = 0; i < node.attributes.length; i++) {
                var a = node.attributes[i];
                attrs.push(a.name + '="' + a.value + '"');
            }
            sum.appendChild(el('span', 'text-muted ms-2', attrs.join(' ')));
        }
        var hasElementChildren = false;
        for (var c = 0; c < node.childNodes.length; c++) {
            if (node.childNodes[c].nodeType === 1) { hasElementChildren = true; break; }
        }
        var txt = (node.textContent || '').trim();
        if (!hasElementChildren && txt) {
            sum.appendChild(el('span', 'xml-text ms-2', '= "' + txt + '"'));
        }
        details.appendChild(sum);
        for (var j = 0; j < node.childNodes.length; j++) {
            var ch = node.childNodes[j];
            if (ch.nodeType === 1) details.appendChild(buildTree(ch));
        }
        return details;
    }

    function renderTree() {
        treeHost.innerHTML = '';
        try {
            var xmlText = getDisplayText((sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || ''));
            if (!xmlText || !xmlText.trim()) { treeHost.textContent = 'No XML to display.'; return; }
            var xml = parseXml(xmlText);
            if (!xml.documentElement) { treeHost.textContent = 'No XML root element.'; return; }
            var tree = buildTree(xml.documentElement);
            tree.open = true;
            treeHost.appendChild(tree);
        } catch (e) {
            treeHost.textContent = 'Failed to render tree: ' + (e && e.message ? e.message : e);
        }
    }

    function renderSummary() {
        summaryHost.innerHTML = '';
        try {
            var xmlText = getDisplayText((sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || ''));
            if (!xmlText.trim()) { summaryHost.textContent = 'No XML to display.'; return; }
            var xml = parseXml(xmlText);
            var people = [];
            var all = xml.getElementsByTagName('*');
            for (var i = 0; i < all.length; i++) if (all[i].localName === 'PersonPublicInfo') people.push(all[i]);
            if (people.length === 0) {
                summaryHost.appendChild(el('div', 'text-muted', 'No PersonPublicInfo elements found.'));
                return;
            }
            for (var p = 0; p < people.length; p++) {
                var wrap = el('div', 'mb-3 p-2 border rounded', null);

                var head = el('div', 'd-flex flex-wrap gap-2 align-items-baseline mb-2', null);
                var badge = el('span', 'badge text-bg-secondary', '#' + (p + 1));
                head.appendChild(badge);
                wrap.appendChild(head);

                var table = document.createElement('table');
                table.className = 'table table-sm table-striped align-middle mb-2';
                var tb = document.createElement('tbody');

                var person = people[p];
                var childs = person.children;
                for (var k = 0; k < childs.length; k++) {
                    var ch = childs[k];
                    var hasKids = ch.children && ch.children.length > 0;
                    if (!hasKids) {
                        var tr = document.createElement('tr');
                        var th = document.createElement('th');
                        th.className = 'text-muted fw-normal';
                        th.style.width = '40%';
                        th.textContent = ch.localName;
                        var td = document.createElement('td');
                        td.textContent = (ch.textContent || '').trim();
                        tr.appendChild(th); tr.appendChild(td);
                        tb.appendChild(tr);
                    }
                }
                if (tb.children.length > 0) { table.appendChild(tb); wrap.appendChild(table); }
                summaryHost.appendChild(wrap);
            }
        } catch (e) {
            summaryHost.textContent = 'Failed to build summary: ' + (e && e.message ? e.message : e);
        }
    }

    function escapeRegExp(s) { return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); }
    function escapeHtml(s) {
        return s.replace(/[&<>\"']/g, function (ch) {
            return { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[ch];
        });
    }
    function highlightPre(preEl, sourceText, q) {
        if (!preEl) return;
        if (!q) { preEl.textContent = getDisplayText(sourceText); return; }
        var rx = new RegExp(escapeRegExp(q), 'gi');
        var masked = getDisplayText(sourceText);
        var html = escapeHtml(masked).replace(rx, function (m) { return '<mark>' + escapeHtml(m) + '</mark>'; });
        preEl.innerHTML = html;
    }

    function applySearch() {
        var prev = treeHost ? treeHost.querySelector('.gpiv-tree-nomatch') : null;
        if (prev) prev.remove();

        var q = (search && search.value || '').trim();

        if (mode === 'tree') {
            var list = treeHost.querySelectorAll('.xml-node, .xml-summary');
            for (var i = 0; i < list.length; i++) list[i].classList.remove('d-none', 'bg-warning-subtle');
            if (!q) return;

            var ql = q.toLowerCase();
            var any = false;
            var nodes = treeHost.querySelectorAll('.xml-node');
            for (var j = 0; j < nodes.length; j++) nodes[j].classList.add('d-none');
            var sums = treeHost.querySelectorAll('.xml-summary');
            for (var s = 0; s < sums.length; s++) {
                var txt = (sums[s].textContent || '').toLowerCase();
                if (txt.indexOf(ql) >= 0) {
                    any = true;
                    sums[s].classList.add('bg-warning-subtle');
                    var p = sums[s].parentElement;
                    while (p && p !== treeHost) {
                        if (p.classList && p.classList.contains('xml-node')) {
                            p.classList.remove('d-none');
                            p.open = true;
                        }
                        p = p.parentElement;
                    }
                } else {
                    sums[s].classList.remove('bg-warning-subtle');
                }
            }
            if (!any) {
                var hint = document.createElement('div');
                hint.className = 'gpiv-tree-nomatch text-muted small';
                hint.textContent = 'No matches. Clear search to show all.';
                treeHost.prepend(hint);
            }
            return;
        }

        if (mode === 'summary') {
            var cards = summaryHost.querySelectorAll('.p-2.border.rounded, .mb-3.p-2.border.rounded');
            if (!q) { for (var c = 0; c < cards.length; c++) cards[c].classList.remove('d-none'); return; }
            var qls = q.toLowerCase();
            for (var c2 = 0; c2 < cards.length; c2++) {
                var match = (cards[c2].textContent || '').toLowerCase().indexOf(qls) >= 0;
                cards[c2].classList.toggle('d-none', !match);
            }
            return;
        }

        if (mode === 'raw')    highlightPre(preRaw,   sourceRaw,   q);
        if (mode === 'pretty') highlightPre(prePretty, sourcePretty, q);
    }

    function expandAll(open) {
        var details = treeHost.querySelectorAll('details.xml-node');
        for (var i = 0; i < details.length; i++) details[i].open = open;
    }

    function setActive() {
        var btns = [prettyBtn, rawBtn, treeBtn, summaryBtn];
        for (var i = 0; i < btns.length; i++) if (btns[i]) btns[i].classList.remove('active');
        if (mode === 'pretty' && prettyBtn) prettyBtn.classList.add('active');
        if (mode === 'raw' && rawBtn) rawBtn.classList.add('active');
        if (mode === 'tree' && treeBtn) treeBtn.classList.add('active');
        if (mode === 'summary' && summaryBtn) summaryBtn.classList.add('active');
    }

    function updateView() {
        var combined = (sourceRaw && sourceRaw.trim()) || (sourcePretty && sourcePretty.trim()) || '';
        var hasAny = combined.length > 0;
        if (emptyMsg) emptyMsg.style.display = hasAny ? 'none' : 'block';

        prePretty.style.display = (mode === 'pretty') ? 'block' : 'none';
        preRaw.style.display    = (mode === 'raw')    ? 'block' : 'none';
        treeHost.style.display  = (mode === 'tree')   ? 'block' : 'none';
        summaryHost.style.display = (mode === 'summary') ? 'block' : 'none';

        prePretty.textContent = getDisplayText(sourcePretty || '');
        preRaw.textContent = getDisplayText(sourceRaw || '');

        var treeActive = (mode === 'tree');
        if (expandBtn) expandBtn.disabled = !treeActive;
        if (collapseBtn) collapseBtn.disabled = !treeActive;

        if (treeActive && hasAny) renderTree();
        if (mode === 'summary' && hasAny) renderSummary();

        setActive();
        savePrefs();
        applySearch();
    }

    prettyBtn && prettyBtn.addEventListener('click', function () { mode = 'pretty'; updateView(); });
    rawBtn && rawBtn.addEventListener('click', function () { mode = 'raw'; updateView(); });
    treeBtn && treeBtn.addEventListener('click', function () { mode = 'tree'; if (search) search.value = ''; updateView(); });
    summaryBtn && summaryBtn.addEventListener('click', function () { mode = 'summary'; updateView(); });
    maskChk && maskChk.addEventListener('change', function () { updateView(); });

    expandBtn && expandBtn.addEventListener('click', function () { expandAll(true); });
    collapseBtn && collapseBtn.addEventListener('click', function () { expandAll(false); });

    search && search.addEventListener('input', applySearch);
    clearSearch && clearSearch.addEventListener('click', function () { if (search) search.value = ''; applySearch(); });

    function getExportText() {
        if (mode === 'raw') return getDisplayText(sourceRaw || preRaw.textContent || '');
        if (mode === 'pretty') return getDisplayText(sourcePretty || prePretty.textContent || '');
        return getDisplayText(sourcePretty || prePretty.textContent || '');
    }
    copyBtn && copyBtn.addEventListener('click', function (e) {
        e.preventDefault();
        var text = getExportText();
        (navigator.clipboard && navigator.clipboard.writeText(text).catch(function () { })) || (function () {
            var ta = document.createElement('textarea');
            ta.value = text; ta.style.position = 'fixed'; ta.style.left = '-10000px';
            document.body.appendChild(ta); ta.select();
            try { document.execCommand('copy'); } catch {}
            ta.remove();
        })();
        var old = copyBtn.innerText; copyBtn.innerText = 'Copied';
        setTimeout(function () { copyBtn.innerText = old; }, 1200);
    });
    downloadBtn && downloadBtn.addEventListener('click', function (e) {
        e.preventDefault();
        var text = getExportText();
        var name = (mode === 'raw') ? 'GetPeoplePublicInfo_raw.xml'
            : (mode === 'pretty') ? 'GetPeoplePublicInfo_pretty.xml'
            : (mode === 'tree') ? 'GetPeoplePublicInfo_from_tree.xml'
            : (mode === 'summary') ? 'GetPeoplePublicInfo_summary.xml'
            : 'GetPeoplePublicInfo.xml';
        var blob = new Blob([text], { type: 'application/xml;charset=utf-8' });
        var a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = name;
        document.body.appendChild(a); a.click();
        URL.revokeObjectURL(a.href); a.remove();
    });

    updateView();
})();
</script>
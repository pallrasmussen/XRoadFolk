@using System.Text.Json
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer L
@{
    var raw = (string?)(ViewData["RawXml"]) ?? "";
    var pretty = (string?)(ViewData["PrettyXml"]) ?? "";

    // Strings used by JavaScript
    var gpivI18n = new {
        NoXmlToDisplay = L["NoXmlToDisplay"].Value,
        NoXmlRoot = L["NoXmlRoot"].Value,
        FailedToRenderTreePrefix = L["FailedToRenderTreePrefix"].Value,
        NoPeopleFound = L["NoPeopleFound"].Value,
        PeopleLabel = L["PeopleLabel"].Value,               // "People"
        Basics = L["Basics"].Value,
        Names = L["Names"].Value,
        Name = L["Name"].Value,
        NoMatchesClear = L["NoMatchesClear"].Value,
        NoMatchesSummaryClear = L["NoMatchesSummaryClear"].Value,
        CopyXml = L["CopyXml"].Value,
        Copied = L["Copied"].Value,
        Download = L["Download"].Value,
        PublicId = L["PublicId"].Value,
        DOB = L["DOB"].Value,
        Status = L["Status"].Value
    };
}
<style>
    /* Sticky toolbar + fullscreen + adjustable height */
    .gpiv-card { position: relative; }
    .gpiv-toolbar { position: sticky; top: -1px; z-index: 2; background: var(--bs-body-bg); padding-top: .25rem; }
    .gpiv-card.gpiv-fullscreen {
        position: fixed; inset: 0; z-index: 1050; margin: 0;
        border-radius: 0; background: var(--bs-body-bg);
    }
    .gpiv-card.gpiv-fullscreen .card-body { height: 100dvh; display: flex; flex-direction: column; }
    .gpiv-card .gpiv-viewport { max-height: var(--gpiv-h, 40vh); }
    .gpiv-card.gpiv-fullscreen .gpiv-viewport { max-height: calc(100dvh - 7.5rem); }

    /* Drag & drop overlay */
    .gpiv-drop {
        display: none; position: absolute; inset: 0; z-index: 3;
        background: rgba(0,0,0,.05); border: 2px dashed var(--bs-secondary);
        align-items: center; justify-content: center; text-align: center; padding: 2rem;
        border-radius: .375rem;
    }
    .gpiv-drop .msg { font-size: .95rem; color: var(--bs-secondary); }

    /* Keyframes for highlight (note: double-at to emit a literal at-keyword) */
    @@keyframes gpivFlash {
        0%   { background: rgba(255, 243, 205, .9); }
        100% { background: transparent; }
    }
    .gpiv-highlight { animation: gpivFlash 1.5s ease-out 1; }
</style>

<div class="card shadow-sm mb-4 gpiv-card">
    <div class="gpiv-drop" id="gpiv-drop">
        <div class="msg">
            <div class="mb-1">@L["DropXmlHint"]</div>
        </div>
    </div>

    <div class="card-body">
        <div class="gpiv-toolbar d-flex flex-wrap gap-2 justify-content-between align-items-center mb-2 border-bottom pb-2">
            <h5 class="card-title mb-0">@L["GetPeoplePublicInfo"]</h5>
            <div class="d-flex flex-wrap gap-2 align-items-center">
                <div class="btn-group" role="group" aria-label="View mode">
                    <button id="gpiv-pretty" type="button" class="btn btn-sm btn-outline-secondary" title="1">@L["Pretty"]</button>
                    <button id="gpiv-raw" type="button" class="btn btn-sm btn-outline-secondary" title="2">@L["Raw"]</button>
                    <button id="gpiv-tree" type="button" class="btn btn-sm btn-outline-secondary" title="3">@L["Tree"]</button>
                    <button id="gpiv-summary" type="button" class="btn btn-sm btn-outline-secondary" title="4">@L["Summary"]</button>
                </div>
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox" id="gpiv-mask">
                    <label class="form-check-label" for="gpiv-mask">@L["MaskSensitive"]</label>
                </div>
                <div class="input-group input-group-sm" style="width: 260px;">
                    <span class="input-group-text">@L["Search"]</span>
                    <input id="gpiv-search" type="text" class="form-control" placeholder="@L["SearchPlaceholder"]">
                    <button id="gpiv-clearsearch" class="btn btn-outline-secondary" type="button" title="@L["Clear"]">×</button>
                </div>
                <div class="btn-group" role="group" aria-label="Tree commands">
                    <button id="gpiv-expand" type="button" class="btn btn-sm btn-outline-secondary" disabled title="E">@L["Expand"]</button>
                    <button id="gpiv-collapse" type="button" class="btn btn-sm btn-outline-secondary" disabled title="C">@L["Collapse"]</button>
                </div>
                <div class="btn-group" role="group" aria-label="Export">
                    <button id="gpiv-copy" type="button" class="btn btn-sm btn-outline-secondary" title="Ctrl+Shift+C">@L["Copy"]</button>
                    <button id="gpiv-download" type="button" class="btn btn-sm btn-outline-secondary">@L["Download"]</button>
                    <button id="gpiv-exportcsv" type="button" class="btn btn-sm btn-outline-secondary" title="@L["ExportCsvTitle"]">CSV</button>
                </div>
                <div class="input-group input-group-sm" style="width: 180px;">
                    <span class="input-group-text">@L["Height"]</span>
                    <input id="gpiv-height" type="range" class="form-range form-control" min="30" max="90" step="5" value="40" title="@L["AdjustHeightTitle"]">
                </div>
                <button id="gpiv-fullscreen" type="button" class="btn btn-sm btn-outline-secondary" title="@L["ToggleFullscreen"]">@L["Fullscreen"]</button>
            </div>
        </div>

        <div id="gpiv-empty" class="text-muted small mb-2" style="display:none;">@L["EmptyState"]</div>

        <pre id="gpiv-xml-pretty"
             class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded"
             style="white-space: pre; overflow: auto;">@pretty</pre>

        <pre id="gpiv-xml-raw"
             class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded"
             style="white-space: pre; overflow: auto; display:none;">@raw</pre>

        <div id="gpiv-xml-tree"
             class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded"
             style="display:none; overflow:auto; font-family: var(--bs-font-monospace, ui-monospace, SFMono-Regular, Menlo, Consolas, monospace);">
        </div>

        <div id="gpiv-xml-summary"
             class="gpiv-viewport mb-0 small bg-body-tertiary p-3 border rounded"
             style="display:none; overflow:auto;">
        </div>
    </div>
</div>

<script>
// localized strings for JS
window.gpiv_i18n = @Html.Raw(JsonSerializer.Serialize(gpivI18n));
</script>
<script>
(function () {
    // FIX: define localized strings object before any use in renderTree/renderSummary/applySearch
    var I18N = (window.gpiv_i18n || {});

    var prettyBtn = document.getElementById('gpiv-pretty');
    var rawBtn = document.getElementById('gpiv-raw');
    var treeBtn = document.getElementById('gpiv-tree');
    var summaryBtn = document.getElementById('gpiv-summary');
    var copyBtn = document.getElementById('gpiv-copy');
    var downloadBtn = document.getElementById('gpiv-download');
    var exportCsvBtn = document.getElementById('gpiv-exportcsv');
    var expandBtn = document.getElementById('gpiv-expand');
    var collapseBtn = document.getElementById('gpiv-collapse');
    var maskChk = document.getElementById('gpiv-mask');
    var search = document.getElementById('gpiv-search');
    var clearSearch = document.getElementById('gpiv-clearsearch');
    var heightRange = document.getElementById('gpiv-height');
    var fullscreenBtn = document.getElementById('gpiv-fullscreen');
    var dropOverlay = document.getElementById('gpiv-drop');

    var prePretty = document.getElementById('gpiv-xml-pretty');
    var preRaw = document.getElementById('gpiv-xml-raw');
    var treeHost = document.getElementById('gpiv-xml-tree');
    var summaryHost = document.getElementById('gpiv-xml-summary');
    var emptyMsg = document.getElementById('gpiv-empty');
    var card = document.querySelector('.gpiv-card');

    var sourcePretty = prePretty ? (prePretty.textContent || '') : '';
    var sourceRaw = preRaw ? (preRaw.textContent || '') : '';

    var prefKey = 'gpiv-pref-v1';
    var mode = 'pretty';
    var saved = null;
    try { saved = JSON.parse(localStorage.getItem(prefKey) || 'null'); } catch {}
    if (saved && typeof saved.mode === 'string') mode = saved.mode;
    if (saved && typeof saved.mask === 'boolean' && maskChk) maskChk.checked = saved.mask;
    var savedQ = saved && typeof saved.q === 'string' ? saved.q : '';
    var savedH = saved && typeof saved.h === 'number' ? saved.h : 40;
    if (search && savedQ) search.value = savedQ;
    if (heightRange) { heightRange.value = savedH; if (card) card.style.setProperty('--gpiv-h', savedH + 'vh'); }

    function savePrefs() {
        try {
            localStorage.setItem(prefKey, JSON.stringify({
                mode: mode,
                mask: !!(maskChk && maskChk.checked),
                q: search ? (search.value || '') : '',
                h: heightRange ? parseInt(heightRange.value || '40', 10) : 40
            }));
        } catch {}
    }

    function maskValue(val) {
        if (!val) return val;
        val = val.replace(/(<SSN>)([^<]+)(<\/SSN>)/gi, function (_, a, mid, b) {
            var digits = (mid || '').replace(/\D/g, '');
            if (!digits) return a + mid + b;
            var masked = digits.length <= 3 ? new Array(digits.length + 1).join('*') : new Array(digits.length - 3 + 1).join('*') + digits.slice(-3);
            return a + masked + b;
        });
        val = val.replace(/(<token>)([^<]+)(<\/token>)/gi, '$1***$3');
        val = val.replace(/(Authorization\s*:\s*)([^\r\n]+)/gi, '$1***');
        return val;
    }
    function getDisplayText(text) { return (maskChk && maskChk.checked) ? maskValue(text) : text; }
    function parseXml(text) {
        var parser = new DOMParser();
        var doc = parser.parseFromString(text, 'application/xml');
        var err = doc.querySelector('parsererror');
        if (err) throw new Error(err.textContent || 'Invalid XML');
        return doc;
    }
    function el(tag, cls, text) {
        var e = document.createElement(tag);
        if (cls) e.className = cls;
        if (text != null) e.textContent = text;
        return e;
    }

    // Tree
    function buildTree(node) {
        if (!node || node.nodeType !== 1) return document.createTextNode('');
        var details = el('details', 'xml-node', null);
        details.open = false;
        var sum = el('summary', 'xml-summary', null);
        sum.appendChild(el('span', 'xml-name fw-bold', node.nodeName));
        if (node.attributes && node.attributes.length) {
            var attrs = [];
            for (var i = 0; i < node.attributes.length; i++) { var a = node.attributes[i]; attrs.push(a.name + '="' + a.value + '"'); }
            sum.appendChild(el('span', 'text-muted ms-2', attrs.join(' ')));
        }
        var hasChildren = false;
        for (var c = 0; c < node.childNodes.length; c++) if (node.childNodes[c].nodeType === 1) { hasChildren = true; break; }
        var txt = (node.textContent || '').trim();
        if (!hasChildren && txt) sum.appendChild(el('span', 'xml-text ms-2', '= "' + txt + '"'));
        details.appendChild(sum);
        for (var j = 0; j < node.childNodes.length; j++) { var ch = node.childNodes[j]; if (ch.nodeType === 1) details.appendChild(buildTree(ch)); }
        return details;
    }
    function renderTree() {
        treeHost.innerHTML = '';
        try {
            var xmlText = getDisplayText((sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || ''));
            if (!xmlText || !xmlText.trim()) { treeHost.textContent = I18N.NoXmlToDisplay || 'No XML to display.'; return; }
            var xml = parseXml(xmlText);
            if (!xml.documentElement) { treeHost.textContent = I18N.NoXmlRoot || 'No XML root element.'; return; }
            var tree = buildTree(xml.documentElement);
            tree.open = true;
            treeHost.appendChild(tree);
        } catch (e) {
            var pfx = I18N.FailedToRenderTreePrefix || 'Failed to render tree:';
            treeHost.textContent = pfx + ' ' + (e && e.message ? e.message : e);
        }
    }

    // Summary helpers
    function isNil(node) {
        if (!node || node.nodeType !== 1 || !node.attributes) return false;
        for (var i = 0; i < node.attributes.length; i++) {
            var a = node.attributes[i];
            var ln = a.localName || a.name;
            if (ln === 'nil' && /^(true|1)$/i.test((a.value || '').trim())) return true;
        }
        return false;
    }
    function hasElementChildren(node) {
        if (!node || !node.children) return false;
        for (var i = 0; i < node.children.length; i++) if (!isNil(node.children[i])) return true;
        return false;
    }
    var atSign = String.fromCharCode(64);
    function buildKvpTableIncludingAttributes(owner) {
        var rows = [];
        if (owner && owner.attributes && owner.attributes.length) {
            for (var i = 0; i < owner.attributes.length; i++) { var a = owner.attributes[i]; rows.push({ key: atSign + a.name, val: (a.value || '') }); }
        }
        var kids = owner && owner.children ? owner.children : [];
        for (var k = 0; k < kids.length; k++) {
            var ch = kids[k];
            if (isNil(ch)) continue;
            if (!hasElementChildren(ch)) {
                rows.push({ key: ch.localName, val: (ch.textContent || '').trim() });
                if (ch.attributes && ch.attributes.length) {
                    for (var a2 = 0; a2 < ch.attributes.length; a2++) { var at = ch.attributes[a2]; rows.push({ key: ch.localName + ' ' + atSign + at.name, val: (at.value || '') }); }
                }
            }
        }
        if (!rows.length) return null;
        var t = document.createElement('table'); t.className = 'table table-sm table-striped align-middle mb-2';
        var tb = document.createElement('tbody');
        for (var r = 0; r < rows.length; r++) {
            var tr = document.createElement('tr');
            var th = document.createElement('th'); th.className = 'text-muted fw-normal'; th.style.width = '40%'; th.textContent = rows[r].key;
            var td = document.createElement('td'); td.textContent = rows[r].val;
            tr.appendChild(th); tr.appendChild(td); tb.appendChild(tr);
        }
        t.appendChild(tb); return t;
    }
    function buildDetails(node, title) {
        var d = document.createElement('details'); d.className = 'summary-group'; d.open = true;
        var s = document.createElement('summary'); s.className = 'fw-semibold'; s.textContent = title || node.localName; d.appendChild(s);
        var table = buildKvpTableIncludingAttributes(node); if (table) d.appendChild(table);
        var complex = [];
        var kids = node.children || [];
        for (var i = 0; i < kids.length; i++) {
            if (!isNil(kids[i]) && hasElementChildren(kids[i])) complex.push(kids[i]);
        }
        for (var j = 0; j < complex.length; j++) d.appendChild(buildDetails(complex[j]));
        return d;
    }
    function getTextLocal(elx, name) {
        if (!elx || !elx.children) return '';
        for (var i = 0; i < elx.children.length; i++) { var c = elx.children[i]; if (c.localName === name) return (c.textContent || '').trim(); }
        return '';
    }
    function badge(text) { var b = document.createElement('span'); b.className = 'badge text-bg-light'; b.textContent = text; return b; }

    var summaryPeopleNodes = [];

    // Summary (enhanced with per-person actions)
    function renderSummary() {
        summaryHost.innerHTML = '';
        summaryPeopleNodes = [];
        try {
            var xmlText = getDisplayText((sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || ''));
            if (!xmlText.trim()) { summaryHost.textContent = I18N.NoXmlToDisplay || 'No XML to display.'; return; }
            var xml = parseXml(xmlText);
            var people = []; var all = xml.getElementsByTagName('*');
            for (var i = 0; i < all.length; i++) if (all[i].localName === 'PersonPublicInfo') people.push(all[i]);
            if (people.length === 0) { summaryHost.appendChild(el('div', 'text-muted', I18N.NoPeopleFound || 'No PersonPublicInfo elements found.')); return; }

            // Header row with count
            var hdr = el('div', 'mb-2 d-flex align-items-center gap-2', null);
            hdr.appendChild(el('strong', null, (I18N.PeopleLabel || 'People') + ': ' + people.length));
            summaryHost.appendChild(hdr);

            for (var p = 0; p < people.length; p++) {
                var person = people[p];
                summaryPeopleNodes.push(person);

                var wrap = el('div', 'mb-3 p-2 border rounded', null);
                wrap.setAttribute('data-idx', String(p));

                var header = el('div', 'd-flex flex-wrap gap-2 align-items-baseline mb-2', null);
                header.appendChild(el('span', 'badge text-bg-secondary', '#' + (p + 1)));

                var nameRoot = null;
                for (var nc = 0; nc < person.children.length; nc++) { if (person.children[nc].localName === 'Names') { nameRoot = person.children[nc]; break; } }
                var fullName = '';
                if (nameRoot) {
                    var firsts = []; var last = '';
                    for (var nn = 0; nn < nameRoot.children.length; nn++) {
                        var nm = nameRoot.children[nn]; if (nm.localName !== 'Name' || isNil(nm)) continue;
                        var tp = getTextLocal(nm, 'Type'); if (tp === 'FirstName') {
                            var order = parseInt(getTextLocal(nm, 'Order') || '9999', 10);
                            firsts.push({ o: isNaN(order) ? 9999 : order, v: getTextLocal(nm, 'Value') });
                        } else if (tp === 'LastName') last = getTextLocal(nm, 'Value') || last;
                    }
                    firsts.sort(function (a, b) { return a.o - b.o; });
                    var joined = []; for (var fj = 0; fj < firsts.length; fj++) joined.push(firsts[fj].v);
                    fullName = (joined.join(' ') + ' ' + last).trim();
                }
                var nameEl = document.createElement('strong'); nameEl.textContent = fullName || '-'; header.appendChild(nameEl);

                var publicId = getTextLocal(person, 'PublicId') || getTextLocal(person, 'PersonId');
                var dob = (getTextLocal(person, 'DateOfBirth') || '').slice(0, 10);
                var civil = getTextLocal(person, 'CivilStatus');
                if (publicId) { var b1 = badge((I18N.PublicId || 'PublicId') + ': ' + publicId); b1.className += ' gpiv-pid'; header.appendChild(b1); }
                if (dob) header.appendChild(badge((I18N.DOB || 'DOB') + ': ' + dob));
                if (civil) header.appendChild(badge((I18N.Status || 'Status') + ': ' + civil));

                // Per-person actions (copy/download)
                var act = document.createElement('div');
                act.className = 'ms-auto d-flex gap-2';
                var btnCopy = document.createElement('button'); btnCopy.type = 'button'; btnCopy.className = 'btn btn-sm btn-outline-secondary gpiv-copy-person'; btnCopy.setAttribute('data-idx', String(p)); btnCopy.textContent = I18N.CopyXml || 'Copy XML';
                var btnDl = document.createElement('button'); btnDl.type = 'button'; btnDl.className = 'btn btn-sm btn-outline-secondary gpiv-dl-person'; btnDl.setAttribute('data-idx', String(p)); btnDl.textContent = I18N.Download || 'Download';
                act.appendChild(btnCopy); act.appendChild(btnDl);
                header.appendChild(act);

                wrap.appendChild(header);

                var basics = document.createElement('details'); basics.className = 'summary-group'; basics.open = true;
                var basicsSum = document.createElement('summary'); basicsSum.className = 'fw-semibold'; basicsSum.textContent = I18N.Basics || 'Basics';
                basics.appendChild(basicsSum);
                var basicsTable = buildKvpTableIncludingAttributes(person); if (basicsTable) basics.appendChild(basicsTable);
                wrap.appendChild(basics);

                if (nameRoot) {
                    var namesSection = document.createElement('details'); namesSection.className = 'summary-group'; namesSection.open = true;
                    var namesSum = document.createElement('summary'); namesSum.className = 'fw-semibold'; namesSum.textContent = I18N.Names || 'Names';
                    namesSection.appendChild(namesSum);
                    var list = document.createElement('div'); list.className = 'd-flex flex-column gap-2';
                    for (var n2 = 0; n2 < nameRoot.children.length; n2++) {
                        var nItem = nameRoot.children[n2]; if (nItem.localName !== 'Name' || isNil(nItem)) continue;
                        var card2 = el('div', 'p-2 border rounded', null);
                        var title2 = el('div', 'small text-muted mb-1', (I18N.Name || 'Name') + ' #' + (list.children.length + 1));
                        card2.appendChild(title2);
                        var t2 = buildKvpTableIncludingAttributes(nItem); if (t2) card2.appendChild(t2);
                        list.appendChild(card2);
                    }
                    namesSection.appendChild(list);
                    wrap.appendChild(namesSection);
                }

                var groups = [];
                for (var g = 0; g < person.children.length; g++) {
                    var ch = person.children[g]; if (isNil(ch)) continue; if (ch.localName === 'Names') continue; if (hasElementChildren(ch)) groups.push(ch);
                }
                for (var gi = 0; gi < groups.length; gi++) {
                    var group = groups[gi];
                    var counts = {}; for (var kk = 0; kk < group.children.length; kk++) { var lk = group.children[kk]; if (isNil(lk)) continue; var nm2 = lk.localName; counts[nm2] = (counts[nm2] || 0) + 1; }
                    var repeated = null; for (var key in counts) { if (counts[key] > 1) { repeated = key; break; } }

                    var section = document.createElement('details'); section.className = 'summary-group'; section.open = true;
                    var secSum = document.createElement('summary'); secSum.className = 'fw-semibold'; secSum.textContent = group.localName;
                    section.appendChild(secSum);

                    if (repeated) {
                        var items = []; for (var ii = 0; ii < group.children.length; ii++) { var it = group.children[ii]; if (!isNil(it) && it.localName === repeated) items.push(it); }
                        var listWrap = document.createElement('div'); listWrap.className = 'd-flex flex-column gap-2';
                        for (var itx = 0; itx < items.length; itx++) {
                            var card3 = el('div', 'p-2 border rounded', null);
                            var title3 = el('div', 'small text-muted mb-1', repeated + ' #' + (itx + 1));
                            card3.appendChild(title3);
                            var leaves2 = buildKvpTableIncludingAttributes(items[itx]); if (leaves2) card3.appendChild(leaves2);
                            var nested = []; for (var nc = 0; nc < items[itx].children.length; nc++) { var kid = items[itx].children[nc]; if (!isNil(kid) && hasElementChildren(kid)) nested.push(kid); }
                            for (var nx = 0; nx < nested.length; nx++) card3.appendChild(buildDetails(nested[nx]));
                            listWrap.appendChild(card3);
                        }
                        section.appendChild(listWrap);
                    } else {
                        var leaves = buildKvpTableIncludingAttributes(group); if (leaves) section.appendChild(leaves);
                        var subComplex = []; for (var sc = 0; sc < group.children.length; sc++) { var scn = group.children[sc]; if (!isNil(scn) && hasElementChildren(scn)) subComplex.push(scn); }
                        for (var sx = 0; sx < subComplex.length; sx++) section.appendChild(buildDetails(subComplex[sx]));
                    }
                    wrap.appendChild(section);
                }
                summaryHost.appendChild(wrap);
            }
        } catch (e) { summaryHost.textContent = (I18N.FailedToBuildSummaryPrefix || 'Failed to build summary:') + ' ' + (e && e.message ? e.message : e); }
    }

    // Search + highlight
    function escapeRegExp(s) { return s.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); }
    function escapeHtml(s) { return s.replace(/[&<>\"']/g, function (ch) { return { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;', "'": '&#39;' }[ch]; }); }
    function highlightPre(preEl, sourceText, q) {
        if (!preEl) return;
        if (!q) { preEl.textContent = getDisplayText(sourceText); return; }
        var rx = new RegExp(escapeRegExp(q), 'gi');
        var masked = getDisplayText(sourceText);
        var html = escapeHtml(masked).replace(rx, function (m) { return '<mark>' + escapeHtml(m) + '</mark>'; });
        preEl.innerHTML = html;
    }
    function highlightInline(el, q) {
        if (!el) return;
        if (!q) { el.textContent = (el.textContent || ''); return; }
        var rx = new RegExp(escapeRegExp(q), 'gi');
        var txt = el.textContent || '';
        el.innerHTML = escapeHtml(txt).replace(rx, function (m) { return '<mark>' + escapeHtml(m) + '</mark>'; });
    }
    function highlightCell(cell, q) {
        if (!cell) return;
        if (!q) { cell.textContent = (cell.textContent || ''); return; }
        var rx = new RegExp(escapeRegExp(q), 'gi');
        var txt = cell.textContent || '';
        cell.innerHTML = escapeHtml(txt).replace(rx, function (m) { return '<mark>' + escapeHtml(m) + '</mark>'; });
    }
    function clearSummaryEffects() {
        // show all cards/rows; remove highlights and hints
        var cards = summaryHost.querySelectorAll('.mb-3.p-2.border.rounded');
        for (var i = 0; i < cards.length; i++) cards[i].classList.remove('d-none');
        var rows = summaryHost.querySelectorAll('tbody tr');
        for (var r = 0; r < rows.length; r++) rows[r].classList.remove('d-none');
        var cells = summaryHost.querySelectorAll('th,td,summary,strong,.badge');
        for (var c = 0; c < cells.length; c++) cells[c].textContent = (cells[c].textContent || '');
        var hint = summaryHost.querySelector('.gpiv-summary-nomatch');
        if (hint) hint.remove();
    }

    // REPLACE the existing applySearch() with this version.
    // Raw, Pretty and Tree branches are unchanged.
    function applySearch() {
        var prevTree = treeHost ? treeHost.querySelector('.gpiv-tree-nomatch') : null;
        if (prevTree) prevTree.remove();
        var prevSum = summaryHost ? summaryHost.querySelector('.gpiv-summary-nomatch') : null;
        if (prevSum) prevSum.remove();

        var q = (search && search.value || '').trim();

        // Tree (unchanged)
        if (mode === 'tree') {
            var list = treeHost.querySelectorAll('.xml-node, .xml-summary');
            for (var i = 0; i < list.length; i++) list[i].classList.remove('d-none', 'bg-warning-subtle');
            if (!q) return;

            var ql = q.toLowerCase();
            var any = false;

            var nodes = treeHost.querySelectorAll('.xml-node');
            for (var j = 0; j < nodes.length; j++) nodes[j].classList.add('d-none');

            var sums = treeHost.querySelectorAll('.xml-summary');
            for (var s = 0; s < sums.length; s++) {
                var txt = (sums[s].textContent || '').toLowerCase();
                if (txt.indexOf(ql) >= 0) {
                    any = true;
                    sums[s].classList.add('bg-warning-subtle');
                    var p = sums[s].parentElement;
                    while (p && p !== treeHost) {
                        if (p.classList && p.classList.contains('xml-node')) {
                            p.classList.remove('d-none');
                            p.open = true;
                        }
                        p = p.parentElement;
                    }
                } else {
                    sums[s].classList.remove('bg-warning-subtle');
                }
            }
            if (!any) { var hint = document.createElement('div'); hint.className = 'gpiv-tree-nomatch text-muted small'; hint.textContent = I18N.NoMatchesClear || 'No matches. Clear search to show all.'; treeHost.prepend(hint); }
            return;
        }

        // Summary (enhanced)
        if (mode === 'summary') {
            if (!q) { clearSummaryEffects(); return; }
            var ql = q.toLowerCase();
            var anyCard = false;

            var cards = summaryHost.querySelectorAll('.mb-3.p-2.border.rounded');
            for (var ci = 0; ci < cards.length; ci++) {
                var card = cards[ci];
                var cardHasMatch = false;

                // Header: strong name + badges
                var header = card.querySelector('.d-flex.flex-wrap.gap-2.align-items-baseline.mb-2');
                if (header) {
                    var nameEl = header.querySelector('strong');
                    if (nameEl) {
                        if ((nameEl.textContent || '').toLowerCase().indexOf(ql) >= 0) cardHasMatch = true;
                        highlightInline(nameEl, q);
                    }
                    var badges = header.querySelectorAll('.badge');
                    for (var bi = 0; bi < badges.length; bi++) {
                        var b = badges[bi];
                        if ((b.textContent || '').toLowerCase().indexOf(ql) >= 0) cardHasMatch = true;
                        highlightInline(b, q);
                    }
                }

                // Each details section
                var detailsList = card.querySelectorAll('details.summary-group');
                for (var di = 0; di < detailsList.length; di++) {
                    var det = detailsList[di];
                    var sectionHas = false;

                    var sm = det.querySelector('summary');
                    if (sm) {
                        if ((sm.textContent || '').toLowerCase().indexOf(ql) >= 0) sectionHas = true;
                        highlightInline(sm, q);
                    }

                    // Table rows
                    var rows = det.querySelectorAll('tbody tr');
                    for (var ri = 0; ri < rows.length; ri++) {
                        var row = rows[ri];
                        var rowTxt = (row.textContent || '').toLowerCase();
                        var match = rowTxt.indexOf(ql) >= 0;
                        row.classList.toggle('d-none', !match);
                        var th = row.querySelector('th'); var td = row.querySelector('td');
                        if (th) highlightCell(th, q);
                        if (td) highlightCell(td, q);
                        if (match) sectionHas = true;
                    }

                    // Nested cards (repeating items)
                    var nestedCards = det.querySelectorAll('.p-2.border.rounded');
                    for (var ni = 0; ni < nestedCards.length; ni++) {
                        var n = nestedCards[ni];
                        var nMatch = ((n.textContent || '').toLowerCase().indexOf(ql) >= 0);
                        n.classList.toggle('d-none', !nMatch);
                        if (nMatch) {
                            sectionHas = true;
                            var pcs = n.querySelectorAll('th,td,summary,strong,.badge');
                            for (var pi = 0; pi < pcs.length; pi++) highlightInline(pcs[pi], q);
                        } else {
                            var clear = n.querySelectorAll('th,td,summary,strong,.badge');
                            for (var cl = 0; cl < clear.length; cl++) clear[cl].textContent = (clear[cl].textContent || '');
                        }
                    }

                    if (sectionHas) det.open = true;
                    cardHasMatch = cardHasMatch || sectionHas;
                }

                card.classList.toggle('d-none', !cardHasMatch);
                if (cardHasMatch) anyCard = true;
            }

            if (!anyCard) {
                var hintS = document.createElement('div');
                hintS.className = 'gpiv-summary-nomatch text-muted small';
                hintS.textContent = I18N.NoMatchesSummaryClear || 'No matches in Summary. Clear search to show all.';
                summaryHost.prepend(hintS);
            }
            return;
        }

        // Raw/Pretty (unchanged)
        if (mode === 'raw')    highlightPre(preRaw,   sourceRaw,   q);
        if (mode === 'pretty') highlightPre(prePretty, sourcePretty, q);
    }

    var gpivSearchTimer = 0;
    function debouncedSearch() {
        if (gpivSearchTimer) { try { window.clearTimeout(gpivSearchTimer); } catch {} }
        gpivSearchTimer = window.setTimeout(function () {
            try { applySearch(); } catch {}
        }, 150);
    }

    function expandAll(open) { var details = treeHost.querySelectorAll('details.xml-node'); for (var i = 0; i < details.length; i++) details[i].open = open; }

    // NEW: Summary expand/collapse
    function expandSummaryAll(open) {
        if (!summaryHost) return;
        var details = summaryHost.querySelectorAll('details.summary-group');
        for (var i = 0; i < details.length; i++) details[i].open = open;
    }

    function setActive() {
        var btns = [prettyBtn, rawBtn, treeBtn, summaryBtn];
        for (var i = 0; i < btns.length; i++) if (btns[i]) btns[i].classList.remove('active');
        if (mode === 'pretty' && prettyBtn) prettyBtn.classList.add('active');
        if (mode === 'raw' && rawBtn) rawBtn.classList.add('active');
        if (mode === 'tree' && treeBtn) treeBtn.classList.add('active');
        if (mode === 'summary' && summaryBtn) summaryBtn.classList.add('active');
    }

    function updateView() {
        var combined = (sourceRaw && sourceRaw.trim()) || (sourcePretty && sourcePretty.trim()) || '';
        var hasAny = combined.length > 0;
        if (emptyMsg) emptyMsg.style.display = hasAny ? 'none' : 'block';
        prePretty.style.display = (mode === 'pretty') ? 'block' : 'none';
        preRaw.style.display    = (mode === 'raw')    ? 'block' : 'none';
        treeHost.style.display  = (mode === 'tree')   ? 'block' : 'none';
        summaryHost.style.display = (mode === 'summary') ? 'block' : 'none';
        prePretty.textContent = getDisplayText(sourcePretty || '');
        preRaw.textContent = getDisplayText(sourceRaw || '');

        var treeActive = (mode === 'tree');
        var summaryActive = (mode === 'summary');

        // Enable buttons for Tree or Summary
        if (expandBtn) expandBtn.disabled = !(treeActive || summaryActive);
        if (collapseBtn) collapseBtn.disabled = !(treeActive || summaryActive);

        if (treeActive && hasAny) renderTree();
        if (summaryActive && hasAny) renderSummary();

        setActive(); savePrefs(); applySearch();
    }

    // Per-person copy/download (event delegation)
    summaryHost && summaryHost.addEventListener('click', function (ev) {
        var t = ev.target;
        while (t && t !== summaryHost && !(t.classList && (t.classList.contains('gpiv-copy-person') || t.classList.contains('gpiv-dl-person')))) {
            t = t.parentElement;
        }
        if (!t || t === summaryHost) return;
        var idx = parseInt(t.getAttribute('data-idx') || '-1', 10);
        if (isNaN(idx) || idx < 0 || idx >= summaryPeopleNodes.length) return;
        try {
            var xml = new XMLSerializer().serializeToString(summaryPeopleNodes[idx]);
            xml = getDisplayText(xml);
            if (t.classList.contains('gpiv-copy-person')) {
                (navigator.clipboard && navigator.clipboard.writeText(xml).catch(function () { })) || (function () {
                    var ta = document.createElement('textarea'); ta.value = xml; ta.style.position = 'fixed'; ta.style.left = '-10000px';
                    document.body.appendChild(ta); ta.select(); try { document.execCommand('copy'); } catch {} ta.remove();
                })();
                t.textContent = (I18N.Copied || 'Copied'); setTimeout(function () { t.textContent = (I18N.CopyXml || 'Copy XML'); }, 1200);
            } else {
                var a = document.createElement('a');
                a.href = URL.createObjectURL(new Blob([xml], { type: 'application/xml;charset=utf-8' }));
                a.download = 'PersonPublicInfo_' + (idx + 1) + '.xml';
                document.body.appendChild(a); a.click(); URL.revokeObjectURL(a.href); a.remove();
            }
        } catch {}
    });

    // Load: Drag & Drop only
    function setXmlFromText(text) {
        if (!text || !text.trim()) return;
        sourceRaw = text; sourcePretty = text;
        updateView();
    }
    function showDrop(v) { if (dropOverlay) dropOverlay.style.display = v ? 'flex' : 'none'; }
    card && card.addEventListener('dragenter', function (e) { e.preventDefault(); showDrop(true); });
    card && card.addEventListener('dragover', function (e) { e.preventDefault(); showDrop(true); });
    card && card.addEventListener('dragleave', function (e) { e.preventDefault(); showDrop(false); });
    card && card.addEventListener('drop', function (e) {
        e.preventDefault(); showDrop(false);
        var dt = e.dataTransfer; if (!dt) return;
        if (dt.files && dt.files.length) {
            var f = dt.files[0]; var reader = new FileReader();
            reader.onload = function () { setXmlFromText(String(reader.result || '')); };
            reader.readAsText(f);
        } else {
            var txt = dt.getData('text') || '';
            setXmlFromText(txt);
        }
    });

    // Toolbar actions
    prettyBtn && prettyBtn.addEventListener('click', function () { mode = 'pretty'; updateView(); });
    rawBtn && rawBtn.addEventListener('click', function () { mode = 'raw'; updateView(); });
    treeBtn && treeBtn.addEventListener('click', function () { mode = 'tree'; if (search) search.value = ''; updateView(); });
    summaryBtn && summaryBtn.addEventListener('click', function () { mode = 'summary'; updateView(); });
    maskChk && maskChk.addEventListener('change', function () { updateView(); });
    expandBtn && expandBtn.addEventListener('click', function () {
        if (mode === 'summary') expandSummaryAll(true);
        else expandAll(true); // Tree (unchanged)
    });
    collapseBtn && collapseBtn.addEventListener('click', function () {
        if (mode === 'summary') expandSummaryAll(false);
        else expandAll(false); // Tree (unchanged)
    });
    search && search.addEventListener('input', debouncedSearch);
    clearSearch && clearSearch.addEventListener('click', function () { if (search) search.value = ''; applySearch(); savePrefs(); });
    heightRange && heightRange.addEventListener('input', function () {
        var v = parseInt(heightRange.value || '40', 10); if (card) card.style.setProperty('--gpiv-h', v + 'vh'); savePrefs();
    });
    fullscreenBtn && fullscreenBtn.addEventListener('click', function () { if (card) card.classList.toggle('gpiv-fullscreen'); });

    // Keyboard shortcuts
    document.addEventListener('keydown', function (e) {
        var ctrl = e.ctrlKey || e.metaKey;
        if (ctrl && e.key.toLowerCase() === 'f') { if (search) { search.focus(); search.select(); } e.preventDefault(); return; }
        if (ctrl && e.shiftKey && e.key.toLowerCase() === 'c') { if (copyBtn) copyBtn.click(); e.preventDefault(); return; }
        if (e.key === '1') { if (prettyBtn) prettyBtn.click(); }
        if (e.key === '2') { if (rawBtn) rawBtn.click(); }
        if (e.key === '3') { if (treeBtn) treeBtn.click(); }
        if (e.key === '4') { if (summaryBtn) summaryBtn.click(); }
        if (e.key.toLowerCase() === 'e') { if (!expandBtn || expandBtn.disabled) return; expandBtn.click(); }
        if (e.key.toLowerCase() === 'c' && !(e.ctrlKey || e.metaKey)) { if (!collapseBtn || collapseBtn.disabled) return; collapseBtn.click(); }
    });

    // Export (whole document)
    function getExportText() {
        if (mode === 'raw') return getDisplayText(sourceRaw || (preRaw ? preRaw.textContent : '') || '');
        if (mode === 'pretty') return getDisplayText(sourcePretty || (prePretty ? prePretty.textContent : '') || '');
        return getDisplayText(sourcePretty || (prePretty ? prePretty.textContent : '') || '');
    }
    copyBtn && copyBtn.addEventListener('click', function (e) {
        e.preventDefault();
        var text = getExportText();
        (navigator.clipboard && navigator.clipboard.writeText(text).catch(function () { })) || (function () {
            var ta = document.createElement('textarea'); ta.value = text; ta.style.position = 'fixed'; ta.style.left = '-10000px';
            document.body.appendChild(ta); ta.select(); try { document.execCommand('copy'); } catch {} ta.remove();
        })();
        var old = copyBtn.innerText; copyBtn.innerText = 'Copied'; setTimeout(function () { copyBtn.innerText = old; }, 1200);
    });
    downloadBtn && downloadBtn.addEventListener('click', function (e) {
        e.preventDefault();
        var text = getExportText();
        var name = (mode === 'raw') ? 'GetPeoplePublicInfo_raw.xml'
            : (mode === 'pretty') ? 'GetPeoplePublicInfo_pretty.xml'
            : (mode === 'tree') ? 'GetPeoplePublicInfo_from_tree.xml'
            : (mode === 'summary') ? 'GetPeoplePublicInfo_summary.xml'
            : 'GetPeoplePublicInfo.xml';
        var blob = new Blob([text], { type: 'application/xml;charset=utf-8' });
        var a = document.createElement('a'); a.href = URL.createObjectURL(blob); a.download = name; document.body.appendChild(a); a.click();
        URL.revokeObjectURL(a.href); a.remove();
    });

    // Export CSV (Summary basics)
    function exportSummaryCsv() {
        try {
            var xmlText = (sourceRaw && sourceRaw.trim()) ? sourceRaw : (sourcePretty || '');
            if (!xmlText.trim()) return;
            var xml = parseXml(xmlText);
            var people = []; var all = xml.getElementsByTagName('*');
            for (var i = 0; i < all.length; i++) if (all[i].localName === 'PersonPublicInfo') people.push(all[i]);
            var rows = [];
            rows.push(['Index','FullName','PublicId','PersonId','DateOfBirth','CivilStatus'].join(','));
            for (var p = 0; p < people.length; p++) {
                var person = people[p];
                // name
                var namesRoot = null;
                for (var nc = 0; nc < person.children.length; nc++) if (person.children[nc].localName === 'Names') { namesRoot = person.children[nc]; break; }
                var full = '';
                if (namesRoot) {
                    var firsts = []; var last = '';
                    for (var nn = 0; nn < namesRoot.children.length; nn++) {
                        var nm = namesRoot.children[nn]; if (nm.localName !== 'Name' || isNil(nm)) continue;
                        var tp = getTextLocal(nm, 'Type');
                        if (tp === 'FirstName') {
                            var order = parseInt(getTextLocal(nm, 'Order') || '9999', 10);
                            firsts.push({ o: isNaN(order) ? 9999 : order, v: getTextLocal(nm, 'Value') });
                        } else if (tp === 'LastName') last = getTextLocal(nm, 'Value') || last;
                    }
                    firsts.sort(function (a, b) { return a.o - b.o; });
                    var firstJoined = []; for (var fj = 0; fj < firsts.length; fj++) firstJoined.push(firsts[fj].v);
                    full = (firstJoined.join(' ') + ' ' + last).trim();
                }
                var pid = getTextLocal(person, 'PublicId');
                var perid = getTextLocal(person, 'PersonId');
                var dob = getTextLocal(person, 'DateOfBirth');
                var civ = getTextLocal(person, 'CivilStatus');
                function q(s){ s = s || ''; s = s.replace(/"/g,'""'); return '"' + s + '"'; }
                rows.push([p+1, q(full), q(pid), q(perid), q(dob), q(civ)].join(','));
            }
            var csv = rows.join('\r\n');
            var a = document.createElement('a');
            a.href = URL.createObjectURL(new Blob([csv], { type: 'text/csv;charset=utf-8' }));
            a.download = 'GetPeoplePublicInfo_summary.csv';
            document.body.appendChild(a); a.click(); URL.revokeObjectURL(a.href); a.remove();
        } catch {}
    }
    exportCsvBtn && exportCsvBtn.addEventListener('click', exportSummaryCsv);

    // Public API
    window.gpiv = {
        setXml: function (raw, pretty) {
            if (typeof raw === 'string') sourceRaw = raw;
            if (typeof pretty === 'string') sourcePretty = pretty; else if (typeof raw === 'string') sourcePretty = raw;
            if (preRaw) preRaw.textContent = getDisplayText(sourceRaw || '');
            if (prePretty) prePretty.textContent = getDisplayText(sourcePretty || '');
            updateView();
        },
        focusPerson: function (publicId) {
            if (!publicId) return;
            mode = 'summary'; updateView();
            // find badge
            var badges = summaryHost.querySelectorAll('.gpiv-pid');
            for (var i = 0; i < badges.length; i++) {
                if ((badges[i].textContent || '').indexOf(publicId) >= 0) {
                    var wrap = badges[i];
                    while (wrap && wrap !== summaryHost && !wrap.classList.contains('border')) wrap = wrap.parentElement;
                    if (wrap && wrap.scrollIntoView) { wrap.scrollIntoView({ block: 'center' }); wrap.classList.add('gpiv-highlight'); setTimeout(function () { wrap.classList.remove('gpiv-highlight'); }, 1500); }
                    break;
                }
            }
        }
    };

    // Deep-link support: ?gpivPublicId=...
    try {
        var qs = new URLSearchParams(window.location.search);
        var linkPid = qs.get('gpivPublicId');
        if (linkPid) { setTimeout(function () { window.gpiv.focusPerson(linkPid); }, 50); }
    } catch {}

    updateView();
})();
</script>
<script>
// Bootstrap the viewer with server-provided XML (so it shows even if parsing the <pre> fails)
(function () {
    var rawFromServer = @Html.Raw(JsonSerializer.Serialize(raw));
    var prettyFromServer = @Html.Raw(JsonSerializer.Serialize(pretty));
    if (window.gpiv && (rawFromServer || prettyFromServer)) {
        window.gpiv.setXml(rawFromServer, prettyFromServer);
    }
})();
</script>
@using System.Xml.Linq
@using System.Xml
@using System.IO
@inject Microsoft.AspNetCore.Mvc.Localization.IViewLocalizer L
@{
    var raw = (string?)ViewData["RawXml"] ?? "";
    var pretty = (string?)ViewData["PrettyXml"] ?? "";

    // Server-side summary (no JS)
    var xmlForSummary = !string.IsNullOrWhiteSpace(raw) ? raw : pretty;
    var peopleSummary = new List<(int Index, string FullName, string PublicId, string Dob, string CivilStatus)>();

    if (!string.IsNullOrWhiteSpace(xmlForSummary))
    {
        try
        {
            var settings = new XmlReaderSettings
            {
                DtdProcessing = DtdProcessing.Prohibit,
                XmlResolver = null,
                MaxCharactersFromEntities = 0,
                MaxCharactersInDocument = 10 * 1024 * 1024
            };
            using var reader = XmlReader.Create(new StringReader(xmlForSummary), settings);
            var doc = XDocument.Load(reader, LoadOptions.None);
            string GetTextLocal(XElement owner, string name)
                => owner.Elements().FirstOrDefault(e => e.Name.LocalName == name)?.Value?.Trim() ?? string.Empty;

            var people = doc.Descendants().Where(e => e.Name.LocalName == "PersonPublicInfo").ToList();
            int idx = 0;
            foreach (var person in people)
            {
                string fullName = string.Empty;
                var namesRoot = person.Elements().FirstOrDefault(e => e.Name.LocalName == "Names");
                if (namesRoot != null)
                {
                    var firsts = new List<(int Order, string Val)>();
                    string last = string.Empty;
                    foreach (var n in namesRoot.Elements().Where(e => e.Name.LocalName == "Name"))
                    {
                        var type = GetTextLocal(n, "Type");
                        if (type == "FirstName")
                        {
                            _ = int.TryParse(GetTextLocal(n, "Order"), out int order);
                            firsts.Add((order == 0 ? int.MaxValue : order, GetTextLocal(n, "Value")));
                        }
                        else if (type == "LastName")
                        {
                            var v = GetTextLocal(n, "Value");
                            if (!string.IsNullOrWhiteSpace(v)) last = v;
                        }
                    }
                    fullName = string.Join(" ", firsts.OrderBy(f => f.Order).Select(f => f.Val).Append(last)).Trim();
                }
                if (string.IsNullOrWhiteSpace(fullName)) fullName = "-";

                string publicId = GetTextLocal(person, "PublicId");
                if (string.IsNullOrWhiteSpace(publicId)) publicId = GetTextLocal(person, "PersonId");
                string dob = GetTextLocal(person, "DateOfBirth");
                if (!string.IsNullOrEmpty(dob) && dob.Length >= 10) dob = dob[..10];
                string civil = GetTextLocal(person, "CivilStatus");

                peopleSummary.Add((++idx, fullName, publicId, dob, civil));
            }
        }
        catch { /* ignore parse errors, still show Pretty/Raw */ }
    }
}

<link rel="stylesheet" href="~/css/gpip.css" asp-append-version="true" />

<div class="card shadow-sm mb-4 person-details">
  <div class="card-body">
    <div class="pd-toolbar d-flex flex-wrap gap-2 justify-content-between align-items-center mb-2 border-bottom pb-2">
      <h5 class="card-title mb-0">@L["GetPeoplePublicInfo"]</h5>
      <div class="d-flex flex-wrap gap-2 gpip-actions">
        <div class="input-group input-group-sm gpip-filter">
          <span class="input-group-text">@L["Search"]</span>
          <input type="text" id="gpip-summary-q" class="form-control" placeholder="@L["SearchPlaceholder"]" />
          <button type="button" id="gpip-summary-q-clear" class="btn btn-outline-secondary">×</button>
        </div>
        <div class="btn-group btn-group-sm" role="group" aria-label="Expand">
          <button type="button" id="gpip-expand-all" class="btn btn-outline-secondary">@L["Expand"]</button>
          <button type="button" id="gpip-collapse-all" class="btn btn-outline-secondary">@L["Collapse"]</button>
        </div>
        <span class="badge text-bg-secondary align-self-center" title="@L["PeopleLabel"]">@peopleSummary.Count</span>
      </div>
    </div>

    @if (string.IsNullOrWhiteSpace(pretty) && string.IsNullOrWhiteSpace(raw))
    {
        <div class="text-muted small">@L["EmptyState"]</div>
    }
    else
    {
        <div class="accordion" id="gpip-accordion">
            <!-- Summary first (default open) -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="gpip-summary-h">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#gpip-summary" aria-expanded="true" aria-controls="gpip-summary">
                        @L["Summary"]
                    </button>
                </h2>
                <div id="gpip-summary" class="accordion-collapse collapse show" aria-labelledby="gpip-summary-h" data-bs-parent="#gpip-accordion">
                    <div class="accordion-body">
                        @if (peopleSummary.Count == 0)
                        {
                            <div class="text-muted small">@L["NoPeopleFound"]</div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-sm table-striped align-middle mb-0" id="gpip-summary-table">
                                    <thead>
                                        <tr>
                                            <th style="width:4rem;" data-sort="num">#</th>
                                            <th data-sort="text">@L["Name"]</th>
                                            <th style="width:20%;" data-sort="text">@L["PublicId"]</th>
                                            <th style="width:16%;" data-sort="date">@L["DOB"]</th>
                                            <th style="width:18%;" data-sort="text">@L["Status"]</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                    @foreach (var p in peopleSummary)
                                    {
                                        <tr>
                                            <th class="text-muted fw-normal">@p.Index</th>
                                            <td>@p.FullName</td>
                                            <td title="@p.PublicId">@p.PublicId</td>
                                            <td>@p.Dob</td>
                                            <td>@p.CivilStatus</td>
                                        </tr>
                                    }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Pretty -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="gpip-pretty-h">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#gpip-pretty" aria-expanded="false" aria-controls="gpip-pretty">
                        @L["Pretty"]
                    </button>
                </h2>
                <div id="gpip-pretty" class="accordion-collapse collapse" aria-labelledby="gpip-pretty-h" data-bs-parent="#gpip-accordion">
                    <div class="accordion-body p-0">
                        <pre class="mb-0 small bg-body-tertiary p-3 border-top gpip-pre" style="white-space: pre; overflow:auto;">@pretty</pre>
                    </div>
                </div>
            </div>

            <!-- Raw -->
            <div class="accordion-item">
                <h2 class="accordion-header" id="gpip-raw-h">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#gpip-raw" aria-expanded="false" aria-controls="gpip-raw">
                        @L["Raw"]
                    </button>
                </h2>
                <div id="gpip-raw" class="accordion-collapse collapse" aria-labelledby="gpip-raw-h" data-bs-parent="#gpip-accordion">
                    <div class="accordion-body p-0">
                        <pre class="mb-0 small bg-body-tertiary p-3 border-top gpip-pre" style="white-space: pre; overflow:auto;">@raw</pre>
                    </div>
                </div>
            </div>
        </div>
    }
  </div>
</div>

<script src="~/js/gpip-accordion-extras.js" asp-append-version="true"></script>
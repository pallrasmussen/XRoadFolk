@using System.Globalization
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@using XRoadFolkWeb.Shared
@inject IOptions<RequestLocalizationOptions> LocOpts
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> SR
@inject Microsoft.Extensions.Configuration.IConfiguration Config
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Af
@{
    Layout = null;
    var currentUi = CultureInfo.CurrentUICulture.Name;
    var supported = LocOpts.Value.SupportedUICultures ?? new List<CultureInfo> { CultureInfo.GetCultureInfo("en-US") };

    // Optional: order cultures according to configuration to ensure predictable display order (deduplicated by Name)
    List<CultureInfo> culturesToShow;
    string[]? order = Config.GetSection("Localization:SupportedCultures").Get<string[]>();
    if (order?.Length > 0)
    {
        var added = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
        var list = new List<CultureInfo>();

        foreach (var code in order)
        {
            var ci = supported.FirstOrDefault(s => string.Equals(s.Name, code, StringComparison.OrdinalIgnoreCase));
            if (ci is not null && added.Add(ci.Name))
            {
                list.Add(ci);
            }
        }

        // Append any cultures not explicitly ordered (still unique)
        foreach (var s in supported)
        {
            if (added.Add(s.Name))
            {
                list.Add(s);
            }
        }

        culturesToShow = list;
    }
    else
    {
        // No explicit order; dedupe supported cultures by Name
        culturesToShow = supported
            .GroupBy(ci => ci.Name, StringComparer.OrdinalIgnoreCase)
            .Select(g => g.First())
            .ToList();
    }
    var nonce = Context?.Items?["CSP_NONCE"] as string;

    // Optional SRI hashes (configure in appsettings under Cdn:Bootswatch:Sri and Cdn:BootstrapIcons:Sri)
    string? bootswatchSri = Config["Cdn:Bootswatch:Sri"]; // e.g., sha384-...
    string? biSri = Config["Cdn:BootstrapIcons:Sri"];    // e.g., sha384-...

    // Feature toggle: Logs button visibility
    bool showLogs = Config.GetValue<bool?>("Features:ShowLogs") ?? true;

    // Antiforgery tokens for AJAX
    var antiTokens = Context is not null ? Af.GetAndStoreTokens(Context) : null;
    var antiReq = antiTokens?.RequestToken;

    // Accessible labels with localized fallback
    var langRes = SR["Language"]; var langText = langRes.ResourceNotFound ? "Language" : langRes.Value;
    var applyRes = SR["Apply"]; var applyText = applyRes.ResourceNotFound ? "Apply" : applyRes.Value;
    var skipRes = SR["SkipToContent"]; var skipText = skipRes.ResourceNotFound ? "Skip to main content" : skipRes.Value;

    // Meta description + OG/Twitter fallbacks
    string appName = (SR["AppName"].ResourceNotFound ? "App" : SR["AppName"].Value);
    string pageTitle = $"{ViewData["Title"]} - {appName}";
    var descRes = SR["MetaDescription"]; // optional resource key
    string metaDescription = descRes.ResourceNotFound ? $"{appName}: People lookup and details viewer." : descRes.Value;
    string? currentUrl = null;
    try { if (Context?.Request is { } req) { currentUrl = $"{req.Scheme}://{req.Host}{req.PathBase}{req.Path}"; } } catch {}

    // Also compute current path+query for returnUrl and nav active checks
    string currentPathAndQuery = "/";
    try { if (ViewContext?.HttpContext?.Request is { } req1) { currentPathAndQuery = (req1.Path.HasValue ? req1.Path.Value : "/") + req1.QueryString.ToUriComponent(); } } catch {}

    // Theme: restrict to 4 and read from query (preview) -> cookie fallback
    string[] themeOptions = new [] { "flatly", "cerulean", "sandstone", "yeti" };
    string cookieTheme = ViewContext?.HttpContext?.Request?.Cookies["site-theme"] ?? string.Empty;
    string qsTheme = (ViewContext?.HttpContext?.Request?.Query["theme"].ToString() ?? string.Empty).Trim();
    string chosenTheme = themeOptions.FirstOrDefault(t => string.Equals(t, qsTheme, StringComparison.OrdinalIgnoreCase))
                      ?? themeOptions.FirstOrDefault(t => string.Equals(t, cookieTheme, StringComparison.OrdinalIgnoreCase))
                      ?? "flatly";

    // Helper to build href for theme keeping other query params (preview only)
    Func<string, string> BuildThemeHref = t => {
        var req = ViewContext?.HttpContext?.Request;
        if (req is null) return "/?theme=" + Uri.EscapeDataString(t ?? "flatly");
        var sb = new System.Text.StringBuilder();
        sb.Append(req.Path.HasValue ? req.Path.Value : "/");
        bool first = true;
        foreach (var kv in req.Query)
        {
            if (string.Equals(kv.Key, "theme", StringComparison.OrdinalIgnoreCase)) continue;
            foreach (var v in kv.Value)
            {
                if (v is null) continue;
                sb.Append(first ? '?' : '&'); first = false;
                sb.Append(Uri.EscapeDataString(kv.Key ?? string.Empty)).Append('=').Append(Uri.EscapeDataString(v));
            }
        }
        sb.Append(first ? '?' : '&');
        sb.Append("theme=").Append(Uri.EscapeDataString(t ?? "flatly"));
        return sb.ToString();
    };

    // Return current URL without any theme query param
    Func<string> BuildReturnUrlSansTheme = () => {
        var req = ViewContext?.HttpContext?.Request;
        if (req is null) return "/";
        var sb = new System.Text.StringBuilder();
        sb.Append(req.Path.HasValue ? req.Path.Value : "/");
        bool first = true;
        foreach (var kv in req.Query)
        {
            if (string.Equals(kv.Key, "theme", StringComparison.OrdinalIgnoreCase)) continue;
            foreach (var v in kv.Value)
            {
                if (v is null) continue;
                sb.Append(first ? '?' : '&'); first = false;
                sb.Append(Uri.EscapeDataString(kv.Key ?? string.Empty)).Append('=').Append(Uri.EscapeDataString(v));
            }
        }
        return sb.ToString();
    };

    // Persistent theme href uses set-theme endpoint and returns without preview param
    Func<string, string> BuildSetThemeHref = t => {
        string ret = "/";
        try { ret = BuildReturnUrlSansTheme(); } catch {}
        return "/set-theme?theme=" + Uri.EscapeDataString(t ?? "flatly") + "&returnUrl=" + Uri.EscapeDataString(ret);
    };
}
<!DOCTYPE html>
<html lang="@currentUi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - @SR["AppName"]</title>

    <meta name="description" content="@metaDescription" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="@currentUi" />
    <meta property="og:title" content="@pageTitle" />
    <meta property="og:description" content="@metaDescription" />
    @if (!string.IsNullOrEmpty(currentUrl)) { <meta property="og:url" content="@currentUrl" /> }
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="@pageTitle" />
    <meta name="twitter:description" content="@metaDescription" />

    @if (!string.IsNullOrEmpty(antiReq))
    {
        <meta name="request-verification-token" content="@antiReq" />
    }

    <link rel="icon" type="image/svg+xml" href="~/favicon.svg" />
    <link rel="icon" type="image/png" href="~/favicon.png" sizes="192x192" />
    <link rel="apple-touch-icon" href="~/favicon.png" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#0d6efd" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#0a0f1a" />

    <!-- Resource Hints for external CDNs -->
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- Bootswatch theme (default: flatly). Dark overrides in site.css via prefers-color-scheme. -->
    @{
        var themeHref = $"https://cdn.jsdelivr.net/npm/bootswatch@5.3.3/dist/{chosenTheme}/bootstrap.min.css";
        if (string.Equals(chosenTheme, "flatly", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(bootswatchSri))
        {
            <link href="@themeHref" rel="stylesheet" integrity="@bootswatchSri" crossorigin="anonymous" />
        }
        else
        {
            <link href="@themeHref" rel="stylesheet" />
        }
    }

    <!-- Bootstrap Icons -->
    @if (string.IsNullOrWhiteSpace(biSri))
    {
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
    }
    else
    {
        <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" integrity="@biSri" crossorigin="anonymous">
    }

    <!-- Custom overrides -->
    <link href="~/css/site.css" rel="stylesheet" asp-append-version="true" />

    @RenderSection("Styles", required: false)
</head>
<body class="d-flex flex-column min-vh-100">
    <a class="skip-to-content" href="#main-content">@skipText</a>
    <!-- Branded navbar -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm">
        <div class="container">
            <a class="navbar-brand fw-bold" asp-page="/Index">@SR["AppName"]</a>

            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav"
                    aria-controls="mainNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div id="mainNav" class="collapse navbar-collapse">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0 align-items-lg-center gap-2">
                    @if (showLogs)
                    {
                        var isLogs = ViewContext?.HttpContext?.Request?.Path.StartsWithSegments("/Logs") == true;
                        <li class="nav-item">
                            <a class="btn btn-sm btn-outline-light @(isLogs ? "active" : null)" asp-page="/Logs/Http">@SR["Nav_Logs"]</a>
                        </li>
                    }
                </ul>

                <div class="d-flex align-items-center gap-2">
                    <!-- Theme preview dropdown (no JS persistence) -->
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-light dropdown-toggle" type="button" id="themeMenu" data-bs-toggle="dropdown" aria-expanded="false">@SR["Theme"]</button>
                        <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="themeMenu">
                            @foreach (var t in themeOptions)
                            {
                                <li><a class="dropdown-item @(string.Equals(t, chosenTheme, StringComparison.OrdinalIgnoreCase) ? "active" : null)" href="@BuildSetThemeHref(t)">@t</a></li>
                            }
                            <li><hr class="dropdown-divider" /></li>
                            <li class="dropdown-header">@SR["PreviewNoSave"]</li>
                            @foreach (var t in themeOptions)
                            {
                                <li><a class="dropdown-item" href="@BuildThemeHref(t)">@t @SR["Preview"]</a></li>
                            }
                        </ul>
                    </div>

                    <!-- Culture switcher -->
                    <form class="d-flex align-items-center" method="post" action="/set-culture" asp-antiforgery="true">
                        <input type="hidden" name="returnUrl" value="@currentPathAndQuery" />
                        <label id="culture-select-label" for="culture-select" class="visually-hidden">@langText</label>
                        <select id="culture-select" class="form-select form-select-sm me-2" name="culture" aria-labelledby="culture-select-label" aria-label="@langText">
                            @foreach (var c in culturesToShow)
                            {
                                var loc = SR[$"Culture_{c!.Name}"];
                                var label = loc.ResourceNotFound ? c!.NativeName : loc.Value;

                                if (string.Equals(c!.Name, currentUi, StringComparison.OrdinalIgnoreCase))
                                {
                                    <option value="@c!.Name" selected>@($"{label} ({c!.Name})")</option>
                                }
                                else
                                {
                                    <option value="@c!.Name">@($"{label} ({c!.Name})")</option>
                                }
                            }
                        </select>
                        <noscript>
                            <button type="submit" class="btn btn-sm btn-outline-light ms-2">@applyText</button>
                        </noscript>
                    </form>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main content -->
    <main id="main-content" role="main" class="flex-grow-1">
        <div class="container my-4">
            @RenderBody()
        </div>
    </main>

    <!-- Footer -->
    <footer class="mt-auto border-top py-3">
        <div class="container d-flex flex-column flex-sm-row align-items-center justify-content-between small text-muted">
            <span>&copy; @DateTime.UtcNow.Year @Config["Branding:AuthorName"]</span>
            <span>@SR["BuiltWith"]</span>
        </div>
    </footer>

    <!-- Local Bootstrap JS (CSP-friendly) -->
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js" asp-append-version="true" defer></script>
    <script src="~/js/antiforgery.js" asp-append-version="true" defer></script>
    <script src="~/js/site.js" asp-append-version="true" defer></script>

    <environment include="Development">
        <script src="/_framework/aspnetcore-browser-refresh.js" defer></script>
    </environment>

    @RenderSection("Scripts", required: false)
</body>
</html>

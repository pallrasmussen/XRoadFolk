@using System.Globalization
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Options
@using XRoadFolkWeb.Shared
@inject IOptions<RequestLocalizationOptions> LocOpts
@inject Microsoft.Extensions.Localization.IStringLocalizer<SharedResource> SR
@inject Microsoft.Extensions.Configuration.IConfiguration Config
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Af
@inject Microsoft.Extensions.Hosting.IHostEnvironment Env
@{
    Layout = null;
    var currentUi = CultureInfo.CurrentUICulture.Name;
    var antiTokens = Context is not null ? Af.GetAndStoreTokens(Context) : null;
    var antiReq = antiTokens?.RequestToken;
    var skipRes = SR["SkipToContent"]; var skipText = skipRes.ResourceNotFound ? "Skip to main content" : skipRes.Value;
    string appName = (SR["AppName"].ResourceNotFound ? "App" : SR["AppName"].Value);
    string pageTitle = $"{ViewData["Title"]} - {appName}";
    var descRes = SR["MetaDescription"]; string metaDescription = descRes.ResourceNotFound ? $"{appName}: People lookup and details viewer." : descRes.Value;
    string? currentUrl = null; try { if (Context?.Request is { } req) { currentUrl = $"{req.Scheme}://{req.Host}{req.PathBase}{req.Path}"; } } catch { }
    bool showLogs = Config.GetValue<bool?>("Features:ShowLogs") ?? true;
    bool isAdmin = User?.Claims.Any(c => c.Type == System.Security.Claims.ClaimTypes.Role && string.Equals(c.Value, "Admin", StringComparison.OrdinalIgnoreCase)) == true;
    bool isDev = Env?.IsDevelopment() == true;
    string[] themeOptions = new [] { "flatly", "cerulean", "sandstone", "yeti" };
    string cookieTheme = ViewContext?.HttpContext?.Request?.Cookies["site-theme"] ?? string.Empty;
    string qsTheme = (ViewContext?.HttpContext?.Request?.Query["theme"].ToString() ?? string.Empty).Trim();
    string chosenTheme = themeOptions.FirstOrDefault(t => string.Equals(t, qsTheme, StringComparison.OrdinalIgnoreCase))
                      ?? themeOptions.FirstOrDefault(t => string.Equals(t, cookieTheme, StringComparison.OrdinalIgnoreCase))
                      ?? "flatly";
    string? bootswatchSri = Config["Cdn:Bootswatch:Sri"]; string? biSri = Config["Cdn:BootstrapIcons:Sri"];    
    bool showDebugUser = Config.GetValue<bool>("Debug:ShowUser", true);
    var cspNonce = Context?.Items?["CSP_NONCE"] as string;
}
<!DOCTYPE html>
<html lang="@currentUi" data-theme="@chosenTheme">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"] - @SR["AppName"]</title>
    <meta name="description" content="@metaDescription" />
    <meta property="og:type" content="website" />
    <meta property="og:locale" content="@currentUi" />
    <meta property="og:title" content="@pageTitle" />
    <meta property="og:description" content="@metaDescription" />
    @if (!string.IsNullOrEmpty(currentUrl)) { <meta property="og:url" content="@currentUrl" /> }
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:title" content="@pageTitle" />
    <meta name="twitter:description" content="@metaDescription" />
    @if (!string.IsNullOrEmpty(antiReq)) { <meta name="request-verification-token" content="@antiReq" /> }
    <link rel="icon" type="image/svg+xml" href="~/favicon.svg" />
    <link rel="icon" type="image/png" href="~/favicon.png" sizes="192x192" />
    <link rel="apple-touch-icon" href="~/favicon.png" />
    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#0d6efd" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#0a0f1a" />
    <!-- Prevent white flash in dark mode: set class and base colors ASAP -->
    <script nonce="@cspNonce">(function(){try{var d=document.documentElement;var k='prefers-dark-mode';var v=null;try{v=localStorage.getItem(k);}catch(e){}var isDark=(v==='true')||(v===null&&(window.matchMedia&&window.matchMedia('(prefers-color-scheme: dark)').matches));if(isDark){d.classList.add('dark-mode');d.style.backgroundColor='#0f1419';}}catch(e){}})();</script>
    <style nonce="@cspNonce">html.dark-mode{background:#0f1419;color:#e6ebef;color-scheme:dark;}html.dark-mode body{background:#0f1419;color:#e6ebef;}</style>
    <link rel="dns-prefetch" href="//cdn.jsdelivr.net" />
    <link rel="preconnect" href="https://cdn.jsdelivr.net" crossorigin />
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    @{ var themeHref = $"https://cdn.jsdelivr.net/npm/bootswatch@5.3.3/dist/{chosenTheme}/bootstrap.min.css"; }
    @if (string.Equals(chosenTheme, "flatly", StringComparison.OrdinalIgnoreCase) && !string.IsNullOrWhiteSpace(bootswatchSri))
    { <link href="@themeHref" rel="stylesheet" integrity="@bootswatchSri" crossorigin="anonymous" /> }
    else { <link href="@themeHref" rel="stylesheet" /> }
    @if (string.IsNullOrWhiteSpace(biSri)) { <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet"> }
    else { <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet" integrity="@biSri" crossorigin="anonymous"> }
    <link href="~/css/site.css" rel="stylesheet" asp-append-version="true" />
    <link href="~/css/dark.css" rel="stylesheet" asp-append-version="true" />
    @RenderSection("Styles", required: false)
</head>
<body class="d-flex flex-column min-vh-100">
    <a class="skip-to-content" href="#main-content">@skipText</a>
    <certificate-banner />
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary shadow-sm">
        <div class="container">
            <a class="navbar-brand fw-bold" asp-page="/Index">@SR["AppName"]</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav" aria-controls="mainNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div id="mainNav" class="collapse navbar-collapse">
                <ul class="navbar-nav me-auto mb-2 mb-lg-0 align-items-lg-center gap-2">
                    @* Always show Logs in Development, otherwise only for Admin and when feature enabled *@
                    @if (isDev || (showLogs && isAdmin))
                    {
                        var isLogs = ViewContext?.HttpContext?.Request?.Path.StartsWithSegments("/Logs") == true;
                        <li class="nav-item"><a class="btn btn-sm btn-outline-light @(isLogs ? "active" : null)" asp-page="/Logs/Http">@SR["Nav_Logs"]</a></li>
                    }
                    @if (isAdmin)
                    {
                        <admin-only>
                            <li class="nav-item"><a class="btn btn-sm btn-outline-warning @((ViewContext?.HttpContext?.Request?.Path.StartsWithSegments("/Admin/Users") ?? false) ? "active" : null)" asp-page="/Admin/Users">Admin</a></li>
                            <li class="nav-item"><a class="btn btn-sm btn-outline-warning @((ViewContext?.HttpContext?.Request?.Path.StartsWithSegments("/Admin/RoleAudit") ?? false) ? "active" : null)" asp-page="/Admin/RoleAudit">Audit</a></li>
                        </admin-only>
                    }
                    else if (isDev)
                    {
                        <li class="nav-item"><a class="btn btn-sm btn-outline-warning @((ViewContext?.HttpContext?.Request?.Path.StartsWithSegments("/Admin/Users") ?? false) ? "active" : null)" asp-page="/Admin/Users">Admin</a></li>
                        <li class="nav-item"><a class="btn btn-sm btn-outline-warning @((ViewContext?.HttpContext?.Request?.Path.StartsWithSegments("/Admin/RoleAudit") ?? false) ? "active" : null)" asp-page="/Admin/RoleAudit">Audit</a></li>
                    }
                </ul>
                @if (showDebugUser)
                {
                    var isAuth = User?.Identity?.IsAuthenticated == true;
                    var nameDisplay = isAuth ? (User?.Identity?.Name ?? "(no name)") : "(anonymous)";
                    var roleClaims = User?.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).Select(c => c.Value).Distinct().ToArray() ?? Array.Empty<string>();
                    var rolesDisplay = roleClaims.Length > 0 ? " [" + string.Join(',', roleClaims) + "]" : (isAuth ? " [no roles]" : string.Empty);
                    var authState = isAuth ? "AUTH" : "NO-AUTH";
                    <span class="navbar-text small text-light me-3" title="Debug user info">@authState: @nameDisplay@rolesDisplay</span>
                }
                <!-- Dark mode toggle placed immediately LEFT of theme/culture switcher -->
                <button id="dark-mode-toggle" type="button" class="btn btn-sm btn-outline-light me-2" title="Toggle dark mode" aria-label="Toggle dark mode" aria-pressed="false">
                    <i id="dark-mode-icon" class="bi bi-moon-stars" aria-hidden="true"></i>
                </button>
                <theme-culture-switcher />
            </div>
        </div>
    </nav>
    <main id="main-content" role="main" class="flex-grow-1">
        <div class="container my-4">@RenderBody()</div>
    </main>
    <footer class="mt-auto border-top py-3">
        <div class="container d-flex flex-column flex-sm-row align-items-center justify-content-between small text-muted">
            <span>&copy; @DateTime.UtcNow.Year @Config["Branding:AuthorName"]</span>
            <span>@SR["BuiltWith"]</span>
        </div>
    </footer>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js" asp-append-version="true" defer></script>
    <script src="~/js/antiforgery.js" asp-append-version="true" defer></script>
    <script src="~/js/site.js" asp-append-version="true" defer></script>
    <script src="~/js/dark-mode.js" asp-append-version="true" defer></script>
    <environment include="Development"><script src="/_framework/aspnetcore-browser-refresh.js" defer></script></environment>
    @RenderSection("Scripts", required: false)
</body>
</html>

name: CI

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

permissions:
  contents: read

jobs:
  build-test:
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Install dotnet-format
        run: dotnet tool install -g dotnet-format --version 8.*

      - name: Add .NET tools to PATH
        run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Verify code format
        run: dotnet format --verify-no-changes

      - name: Build with analyzers (treat warnings as errors)
        run: dotnet build --configuration Release -warnaserror --no-restore

      - name: Test with coverage
        run: >-
          dotnet test --configuration Release --no-build
          --collect:"XPlat Code Coverage"
          --results-directory ./TestResults
          --logger "trx;LogFileName=test-results.trx"
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura

      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate coverage report
        shell: bash
        run: |
          set -euo pipefail
          COV_FILE=$(ls -1 TestResults/**/coverage.cobertura.xml | head -n 1 || true)
          if [ -z "$COV_FILE" ]; then
            echo "No coverage file found"
            exit 0
          fi
          reportgenerator -reports:"$COV_FILE" -targetdir:"coverage" -reporttypes:'HtmlInline;Cobertura' -assemblyfilters:+XRoadFolk*

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            TestResults/**
            **/*.trx

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage/**

      - name: Start web app
        env:
          ASPNETCORE_ENVIRONMENT: Development
          ASPNETCORE_URLS: http://localhost:5000
        run: |
          nohup dotnet run --project src/XRoadFolkWeb/XRoadFolkWeb.csproj --no-build -c Release > app.log 2>&1 &
          echo $! > app.pid
          for i in {1..30}; do
            if curl -fsS http://localhost:5000/ >/dev/null 2>&1; then echo "App is up"; break; fi; sleep 1; done

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright deps
        working-directory: tests/e2e
        run: |
          npm ci
          npx playwright install --with-deps

      - name: Run Playwright a11y tests (axe)
        working-directory: tests/e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:5000
        run: npx playwright test --reporter=dot

      - name: Tear down web app
        if: always()
        run: |
          if [ -f app.pid ]; then kill $(cat app.pid) || true; fi
          pkill -f XRoadFolkWeb || true

      - name: Upload app.log (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: app-log
          path: app.log

  publish:
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    needs: build-test
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore

      - name: Publish Web project
        run: dotnet publish src/XRoadFolkWeb/XRoadFolkWeb.csproj -c Release -o ./publish /p:UseAppHost=false

      - name: Upload publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xroadfolkweb-publish
          path: publish/**
